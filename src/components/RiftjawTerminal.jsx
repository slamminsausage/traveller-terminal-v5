import React, { useState, useEffect } from "react";
import { Card, CardContent } from "../ui/Card";
import { Input } from "../ui/Input";
import { Button } from "../ui/Button";
import { motion } from "framer-motion";
import { useNavigate } from "react-router-dom";
import AudioManager from '../utils/AudioManager';

// Authentication levels data - SIMPLE structure
const authLevels = [
  {
    id: 1,
    title: "LEVEL 1 AUTHENTICATION",
    content: "DEEP CORE SECURITY - LEVEL 1\n\nVERSE I PASSPHRASE REQUIRED:",
    password: "SOMETHING",
    successMessage: "Level 1 Authentication successful.\nProceeding to Level 2...",
    failureMessage: "Authentication failed. Consult Verse I of the Deep Core Hymnal."
  },
  {
    id: 2,
    title: "LEVEL 2 AUTHENTICATION", 
    content: "DEEP CORE SECURITY - LEVEL 2\n\nVERSE II PASSPHRASE REQUIRED:",
    password: "PERFECT",
    successMessage: "Level 2 Authentication successful.\nProceeding to Level 3...",
    failureMessage: "Authentication failed. Consult Verse II of the Deep Core Hymnal."
  },
  {
    id: 3,
    title: "LEVEL 3 AUTHENTICATION",
    content: "DEEP CORE SECURITY - LEVEL 3\n\nVERSE III PASSPHRASE REQUIRED:",
    password: "BEHIND THE EYE",
    successMessage: "Level 3 Authentication successful.\nProceeding to final authentication level...",
    failureMessage: "Authentication failed. Consult Verse III of the Deep Core Hymnal."
  },
  {
    id: 4,
    title: "LEVEL 4 AUTHENTICATION",
    content: "DEEP CORE SECURITY - LEVEL 4\n\nVERSE IV PASSPHRASE REQUIRED:",
    password: "MADE US",
    successMessage: "Final authentication successful.\n\nAccessing RIFTJAW DEEP CORE archives...",
    failureMessage: "Authentication failed. Consult Verse IV of the Deep Core Hymnal."
  }
];

const finalArchive = `RIFTJAW DEEP CORE ARCHIVE

Date: Approximately 20,000 Standard Years Ago
Author: Builder Collective - Final Archive

RIFTJAW DEEP CORE: CLASSIFIED DOCUMENTATION

[Translation from Ancient Dialect Complete - 97.3% Accuracy]

To those who discover this archive, understand that what you call 'Riftjaw' is not a mythical creature but the culmination of our greatest technological achievement â€“ a vast computational system designed for a singular purpose: the safe containment and harnessing of the Eclipse Shard.

==== HISTORICAL CONTEXT ====

Our civilization discovered the Eclipse Shard approximately 23,000 standard years ago when it crashed into what is now the Riftjaw Rim. Initial contact proved catastrophic â€“ the Shard's energy signature destabilized our quantum networks and affected the neural patterns of those exposed.

We quickly determined the Shard was a fragment of something vast and ancient, possibly predating this galaxy. Its power potential was immeasurable, but so too was its danger.

==== RIFTJAW SYSTEM ARCHITECTURE ====

The RIFTJAW (Resonant Integration Field & Temporal-Josephson Adaptive Waveform) superstructure consists of several integrated components:

1. CORE CHAMBER: Houses the primary Eclipse Shard fragment in perfect quantum suspension. The chamber resembles an enormous eye when viewed from specific angles, leading to the mythological misinterpretation.

2. COOLING NETWORKS: The scale-like external structures are actually advanced cooling systems necessary to manage the intense energy generated by the Shard.

3. STABILIZATION MATRIX: A network of tunnels filled with superconducting materials in precise geometric patterns, distributing and balancing energy throughout the system.

4. MONITORING SUBSTATIONS: Sensor arrays resembling neural clusters that constantly analyze energy fluctuations and make automatic adjustments.

==== THE ECLIPSE SHARD ====

The Shard defies conventional analysis. Our studies indicate it exists partially in our dimension and partially... elsewhere. Its energy signature suggests capabilities including:

- Unlimited clean energy generation
- Manipulation of local spacetime
- Enhancement of consciousness/psionic potential
- Possible communication with other dimensions

CRITICAL WARNING: THE SHARD MUST REMAIN INTACT AND PROPERLY CONTAINED

Any attempt to remove fragments from the main Shard or from the RIFTJAW containment system will create dangerous instability. The system is designed to maintain balance â€“ the geological metaphor of 'scales' used in later mythology is surprisingly apt.

==== MAINTENANCE PROTOCOL ====

If you are reading this, our civilization has likely passed into history. The RIFTJAW system was designed to be self-sustaining for at least 50,000 years, but may require intervention if significant damage occurs.

Should the Shard ever be fragmented or removed from the core chamber, immediate restoration is imperative. The system has built-in defensive measures that will activate automatically to protect itself and restore balance â€“ these may manifest as seismic events, energy discharges, or other phenomena that could be interpreted as an 'awakening' by those unfamiliar with the technology.

==== FINAL NOTES ====

We built RIFTJAW beneath what would become Caldonis because the geological formation was ideal for the containment system. The city that grew above it has, unknowingly, been powered and protected by the Shard for millennia.

The mythology that developed around 'Riftjaw' as a sleeping guardian contains more truth than its believers know. The system does indeed 'sleep' in its steady-state operation, and it will 'awaken' defensive protocols if the balance is threatened.

May this knowledge serve you well. The power of the Eclipse Shard could elevate your civilization to new heights â€“ or destroy it completely if mishandled.

Remember: Something perfect behind the eye made us what we are today. Do not squander this inheritance.

[END OF ARCHIVE]`;

export default function RiftjawTerminal() {
  const navigate = useNavigate();
  const [currentLevel, setCurrentLevel] = useState(0);
  const [passwordInput, setPasswordInput] = useState("");
  const [passwordAttempts, setPasswordAttempts] = useState(0);
  const [showSuccess, setShowSuccess] = useState(false);
  const [successMessage, setSuccessMessage] = useState("");
  const [showFinalArchive, setShowFinalArchive] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [soundEnabled, setSoundEnabled] = useState(true);

  // Initialize audio
  useEffect(() => {
    AudioManager.preloadSounds();
    // Play mysterious ambient sound for ancient terminal
    AudioManager.playAmbient('secure', 0.2);
    
    return () => {
      AudioManager.stopAmbient();
    };
  }, []);

  // Play typing sound effect
  const playKeySound = () => {
    if (soundEnabled && Math.random() > 0.5) {
      AudioManager.playEffect('keypress', 0.1);
    }
  };

  const handlePasswordSubmit = () => {
    const level = authLevels[currentLevel];
    
    if (passwordInput === level.password) {
      // Correct password
      AudioManager.playEffect('access_granted', 0.4);
      setShowSuccess(true);
      setSuccessMessage(level.successMessage);
      setPasswordInput("");
      setPasswordAttempts(0);
      setErrorMessage("");
      
      // Play level progression sound
      if (currentLevel < authLevels.length - 1) {
        AudioManager.playEffect('corruption', 0.2);
      } else {
        // Final level - play special sound
        AudioManager.playEffect('glitch', 0.3);
      }
      
      // Auto-advance after 2 seconds
      setTimeout(() => {
        setShowSuccess(false);
        setSuccessMessage("");
        
        if (currentLevel < authLevels.length - 1) {
          setCurrentLevel(currentLevel + 1);
        } else {
          setShowFinalArchive(true);
          // Change ambient to more intense
          AudioManager.playAmbient('corrupted', 0.3);
        }
      }, 2000);
    } else {
      // Wrong password
      AudioManager.playEffect('access_denied', 0.4);
      const attempts = passwordAttempts + 1;
      setPasswordAttempts(attempts);
      setPasswordInput("");
      
      if (attempts >= 3) {
        // Max attempts reached
        AudioManager.playEffect('warning', 0.5);
        setErrorMessage("Maximum attempts exceeded. Access denied.");
        setTimeout(() => {
          navigate("/");
        }, 2000);
      } else {
        // Show failure message
        setErrorMessage(`${level.failureMessage}\n\nAttempts remaining: ${3 - attempts}`);
      }
    }
  };

  // Show final archive
  if (showFinalArchive) {
    return (
      <div className="flex flex-col items-center min-h-screen bg-black p-4">
        {/* Sound Toggle */}
        <div className="fixed top-4 left-4 z-50">
          <Button
            className="bg-green-400 text-black font-mono px-2 py-1 rounded text-xs hover:bg-green-500"
            onClick={() => {
              const isMuted = AudioManager.toggleMute();
              setSoundEnabled(!isMuted);
            }}
          >
            {soundEnabled ? 'ðŸ”Š' : 'ðŸ”‡'}
          </Button>
        </div>
        
        <Card className="w-full max-w-md lg:max-w-lg border-green-400 border-2">
          <CardContent className="p-4 sm:p-6">
            <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 1 }}>
              <div 
                className="terminal terminal-flicker terminal-scanlines"
                style={{ 
                  overflow: "auto", 
                  minHeight: "300px",
                  maxHeight: "70vh",
                  position: "relative",
                  fontSize: "11px",
                  sm: { fontSize: "12px" },
                  lg: { fontSize: "14px" }
                }}
              >
                <div style={{ whiteSpace: "pre-wrap", marginBottom: "10px" }}>
                  {finalArchive}
                </div>
                <Button
                  className="bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500 mt-2 w-full sm:w-auto"
                  onClick={() => {
                    AudioManager.playEffect('keypress', 0.2);
                    navigate("/");
                  }}
                >
                  Back to Terminal
                </Button>
              </div>
            </motion.div>
          </CardContent>
        </Card>
      </div>
    );
  }

  // Show success message
  if (showSuccess) {
    return (
      <div className="flex flex-col items-center min-h-screen bg-black p-4">
        <Card className="w-full max-w-md lg:max-w-lg border-green-400 border-2">
          <CardContent className="p-4 sm:p-6">
            <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 1 }}>
              <div 
                className="terminal terminal-flicker"
                style={{ 
                  overflow: "auto", 
                  height: "200px", 
                  position: "relative",
                  fontSize: "12px",
                  sm: { fontSize: "14px" }
                }}
              >
                <div style={{ whiteSpace: "pre-wrap", marginBottom: "10px" }}>
                  {successMessage}
                </div>
              </div>
            </motion.div>
          </CardContent>
        </Card>
      </div>
    );
  }

  // Main authentication screen
  const currentLevelData = authLevels[currentLevel];
  
  return (
    <div className="flex flex-col items-center min-h-screen bg-black p-4">
      {/* Sound Toggle */}
      <div className="fixed top-4 left-4 z-50">
        <Button
          className="bg-green-400 text-black font-mono px-2 py-1 rounded text-xs hover:bg-green-500"
          onClick={() => {
            const isMuted = AudioManager.toggleMute();
            setSoundEnabled(!isMuted);
          }}
        >
          {soundEnabled ? 'ðŸ”Š' : 'ðŸ”‡'}
        </Button>
      </div>
      
      <Card className="w-full max-w-md lg:max-w-lg border-green-400 border-2">
        <CardContent className="p-4 sm:p-6">
          <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 1 }}>
            <div 
              className="terminal terminal-flicker"
              style={{ 
                overflow: "auto", 
                minHeight: "250px",
                position: "relative",
                fontSize: "12px",
                sm: { fontSize: "14px" }
              }}
            >
              {/* Level content */}
              <div style={{ whiteSpace: "pre-wrap", marginBottom: "15px" }}>
                {currentLevelData.title}
                {"\n\n"}
                Date: Unknown
                {"\n"}
                Author: Ancient Security System
                {"\n\n"}
                {currentLevelData.content}
              </div>
              
              {/* Error message */}
              {errorMessage && (
                <div style={{ color: '#ff6666', marginBottom: '10px', whiteSpace: 'pre-wrap' }}>
                  {errorMessage}
                </div>
              )}
              
              {/* Password input */}
              <div className="mt-2">
                <div style={{ marginBottom: '5px' }}>Enter Level {currentLevel + 1} Passphrase:</div>
                <Input
                  className="bg-black text-green-400 border border-green-400 px-3 py-2 font-mono focus:outline-none w-full"
                  placeholder="Enter Passphrase"
                  value={passwordInput}
                  onChange={(e) => {
                    playKeySound();
                    setPasswordInput(e.target.value);
                  }}
                  type="password"
                  onKeyPress={(e) => {
                    if (e.key === 'Enter') {
                      handlePasswordSubmit();
                    }
                  }}
                />
                <div className="flex flex-col sm:flex-row gap-2 mt-2">
                  <Button
                    className="bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500 w-full sm:w-auto"
                    onClick={() => {
                      AudioManager.playEffect('keypress', 0.2);
                      handlePasswordSubmit();
                    }}
                  >
                    Submit
                  </Button>
                  <Button
                    className="bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500 w-full sm:w-auto"
                    onClick={() => {
                      AudioManager.playEffect('keypress', 0.2);
                      navigate("/");
                    }}
                  >
                    Back
                  </Button>
                </div>
              </div>
            </div>
          </motion.div>
        </CardContent>
      </Card>
    </div>
  );
}