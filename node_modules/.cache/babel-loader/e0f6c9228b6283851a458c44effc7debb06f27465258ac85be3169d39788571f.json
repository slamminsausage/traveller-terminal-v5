{"ast":null,"code":"class AudioManager {\n  constructor() {\n    this.sounds = {};\n    this.ambientSound = null;\n    this.isMuted = false;\n  }\n  preloadSounds() {\n    // Ambient sounds\n    const ambientSounds = {\n      'normal': '/audio/terminal-hum.mp3',\n      'corrupted': '/audio/static-hum.mp3',\n      'secure': '/audio/server-room.mp3',\n      'damaged': '/audio/electrical-sparks.mp3',\n      'interference': '/audio/signal-interference.mp3'\n    };\n\n    // Effect sounds\n    const effectSounds = {\n      'keypress': '/audio/mechanical-key.mp3',\n      'access_granted': '/audio/success-chime.mp3',\n      'access_denied': '/audio/error-buzz.mp3',\n      'corruption': '/audio/data-corruption.mp3',\n      'glitch': '/audio/glitch-sound.mp3',\n      'warning': '/audio/warning-beep.mp3',\n      'connection_lost': '/audio/connection-lost.mp3',\n      'typing': '/audio/typing-sound.mp3'\n    };\n\n    // Preload all sounds\n    Object.entries({\n      ...ambientSounds,\n      ...effectSounds\n    }).forEach(([key, path]) => {\n      const audio = new Audio(path);\n      audio.preload = 'auto';\n      this.sounds[key] = audio;\n    });\n  }\n  playAmbient(type = 'normal', volume = 0.3) {\n    if (this.isMuted) return;\n\n    // Stop current ambient sound\n    if (this.ambientSound) {\n      this.ambientSound.pause();\n      this.ambientSound.currentTime = 0;\n    }\n\n    // Play new ambient sound\n    if (this.sounds[type]) {\n      this.ambientSound = this.sounds[type];\n      this.ambientSound.volume = volume;\n      this.ambientSound.loop = true;\n      this.ambientSound.play().catch(e => console.log('Ambient sound blocked:', e));\n    }\n  }\n  stopAmbient() {\n    if (this.ambientSound) {\n      this.ambientSound.pause();\n      this.ambientSound.currentTime = 0;\n      this.ambientSound = null;\n    }\n  }\n  playEffect(effect, volume = 0.5) {\n    if (this.isMuted) return;\n    if (this.sounds[effect]) {\n      const sound = this.sounds[effect].cloneNode();\n      sound.volume = volume;\n      sound.play().catch(e => console.log('Effect sound blocked:', e));\n    }\n  }\n  toggleMute() {\n    this.isMuted = !this.isMuted;\n    if (this.isMuted && this.ambientSound) {\n      this.ambientSound.pause();\n    } else if (!this.isMuted && this.ambientSound) {\n      this.ambientSound.play();\n    }\n    return this.isMuted;\n  }\n  setVolume(volume) {\n    if (this.ambientSound) {\n      this.ambientSound.volume = volume;\n    }\n  }\n}\nexport default new AudioManager();","map":{"version":3,"names":["AudioManager","constructor","sounds","ambientSound","isMuted","preloadSounds","ambientSounds","effectSounds","Object","entries","forEach","key","path","audio","Audio","preload","playAmbient","type","volume","pause","currentTime","loop","play","catch","e","console","log","stopAmbient","playEffect","effect","sound","cloneNode","toggleMute","setVolume"],"sources":["C:/Users/James/Desktop/traveller-terminal-v5/src/utils/AudioManager.js"],"sourcesContent":["class AudioManager {\r\n  constructor() {\r\n    this.sounds = {};\r\n    this.ambientSound = null;\r\n    this.isMuted = false;\r\n  }\r\n\r\n  preloadSounds() {\r\n    // Ambient sounds\r\n    const ambientSounds = {\r\n      'normal': '/audio/terminal-hum.mp3',\r\n      'corrupted': '/audio/static-hum.mp3',\r\n      'secure': '/audio/server-room.mp3',\r\n      'damaged': '/audio/electrical-sparks.mp3',\r\n      'interference': '/audio/signal-interference.mp3'\r\n    };\r\n\r\n    // Effect sounds\r\n    const effectSounds = {\r\n      'keypress': '/audio/mechanical-key.mp3',\r\n      'access_granted': '/audio/success-chime.mp3',\r\n      'access_denied': '/audio/error-buzz.mp3',\r\n      'corruption': '/audio/data-corruption.mp3',\r\n      'glitch': '/audio/glitch-sound.mp3',\r\n      'warning': '/audio/warning-beep.mp3',\r\n      'connection_lost': '/audio/connection-lost.mp3',\r\n      'typing': '/audio/typing-sound.mp3'\r\n    };\r\n\r\n    // Preload all sounds\r\n    Object.entries({...ambientSounds, ...effectSounds}).forEach(([key, path]) => {\r\n      const audio = new Audio(path);\r\n      audio.preload = 'auto';\r\n      this.sounds[key] = audio;\r\n    });\r\n  }\r\n\r\n  playAmbient(type = 'normal', volume = 0.3) {\r\n    if (this.isMuted) return;\r\n    \r\n    // Stop current ambient sound\r\n    if (this.ambientSound) {\r\n      this.ambientSound.pause();\r\n      this.ambientSound.currentTime = 0;\r\n    }\r\n\r\n    // Play new ambient sound\r\n    if (this.sounds[type]) {\r\n      this.ambientSound = this.sounds[type];\r\n      this.ambientSound.volume = volume;\r\n      this.ambientSound.loop = true;\r\n      this.ambientSound.play().catch(e => console.log('Ambient sound blocked:', e));\r\n    }\r\n  }\r\n\r\n  stopAmbient() {\r\n    if (this.ambientSound) {\r\n      this.ambientSound.pause();\r\n      this.ambientSound.currentTime = 0;\r\n      this.ambientSound = null;\r\n    }\r\n  }\r\n\r\n  playEffect(effect, volume = 0.5) {\r\n    if (this.isMuted) return;\r\n    \r\n    if (this.sounds[effect]) {\r\n      const sound = this.sounds[effect].cloneNode();\r\n      sound.volume = volume;\r\n      sound.play().catch(e => console.log('Effect sound blocked:', e));\r\n    }\r\n  }\r\n\r\n  toggleMute() {\r\n    this.isMuted = !this.isMuted;\r\n    if (this.isMuted && this.ambientSound) {\r\n      this.ambientSound.pause();\r\n    } else if (!this.isMuted && this.ambientSound) {\r\n      this.ambientSound.play();\r\n    }\r\n    return this.isMuted;\r\n  }\r\n\r\n  setVolume(volume) {\r\n    if (this.ambientSound) {\r\n      this.ambientSound.volume = volume;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new AudioManager();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}