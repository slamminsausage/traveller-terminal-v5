{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\James\\\\Desktop\\\\traveller-terminal-v5\\\\src\\\\components\\\\TravellerTerminal.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Card, CardContent } from \"../ui/Card\";\nimport { Input } from \"../ui/Input\";\nimport { Button } from \"../ui/Button\";\nimport { motion } from \"framer-motion\";\nimport { useNavigate } from \"react-router-dom\";\n\n// Terminal definitions including labpc81 and vanagandr001\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst terminals = {\n  \"lysani01\": {\n    requiresRoll: 8,\n    logs: \"/logs/lysani01.json\"\n  },\n  \"s.elara01\": {\n    requiresRoll: false,\n    logs: \"/logs/s.elara01.json\"\n  },\n  \"slocombe875\": {\n    requiresRoll: 8,\n    logs: \"/logs/slocombe875.json\"\n  },\n  \"waferterm01\": {\n    requiresRoll: false,\n    logs: \"/logs/waferterm01.json\"\n  },\n  \"labpc81\": {\n    requiresRoll: 6,\n    logs: \"/logs/labpc81.json\"\n  },\n  \"vanagandr001\": {\n    requiresRoll: 7,\n    logs: \"/logs/vanagandr001.json\"\n  }\n};\n\n/**\r\n * Helper function that returns a formatted message string for a log.\r\n * If includeRoll is true and an on_success message is available, it is placed at the top.\r\n */\nconst formatLogMessage = (log, includeRoll = false) => {\n  let message = \"\";\n  if (includeRoll && log.roll_check && log.roll_check.on_success) {\n    message += log.roll_check.on_success + \"\\n\\n\";\n  }\n  message += \"Author: \" + log.author + \"\\n\";\n  message += \"Date: \" + log.date + \"\\n\\n\";\n  message += log.content;\n  return message;\n};\n\n// Generic typing function with adjustable delay\nconst typeText = (text, setState, callback = null, index = 0, delay = 30) => {\n  if (index < text.length) {\n    setState(prev => prev + text[index]);\n    setTimeout(() => typeText(text, setState, callback, index + 1, delay), delay);\n  } else {\n    if (callback) callback();\n  }\n};\nexport default function TravellerTerminal() {\n  _s();\n  const navigate = useNavigate();\n\n  // Initialization states\n  const [initText, setInitText] = useState(\"\");\n  const [initComplete, setInitComplete] = useState(false);\n  const hasInitialized = useRef(false);\n\n  // Terminal and log states\n  const [inputCode, setInputCode] = useState(\"\");\n  const [terminalData, setTerminalData] = useState(\"\");\n  const [logData, setLogData] = useState(null);\n  const [rollCheck, setRollCheck] = useState(null);\n  const [specialRollCheck, setSpecialRollCheck] = useState(null);\n  const [activeTerminal, setActiveTerminal] = useState(null);\n  const [selectedLogData, setSelectedLogData] = useState(null);\n  const [displayedText, setDisplayedText] = useState(\"\");\n  const [logTypingComplete, setLogTypingComplete] = useState(false);\n\n  // Password-related states\n  const [requiresPassword, setRequiresPassword] = useState(false);\n  const [passwordInput, setPasswordInput] = useState(\"\");\n  const [passwordAttempts, setPasswordAttempts] = useState(0);\n  const [isPasswordUnlocked, setIsPasswordUnlocked] = useState(false);\n\n  // State for grouped logs and for showing a separate page for audio logs\n  const [expandedGroup, setExpandedGroup] = useState(null);\n  const [showAudioLogsPage, setShowAudioLogsPage] = useState(false);\n  const [audioLogsData, setAudioLogsData] = useState([]);\n\n  // Initialization effect: runs once.\n  useEffect(() => {\n    if (hasInitialized.current) return;\n    hasInitialized.current = true;\n    const loadingMessages = [\"Initializing system...\", \"Connecting to network...\", \"Loading secure protocols...\", \"The Traveller Terminal is now online.\"];\n    let i = 0;\n    const displayNextMessage = () => {\n      if (i < loadingMessages.length) {\n        typeText(loadingMessages[i] + \"\\n\", setInitText, () => {\n          setInitText(prev => prev + \"\\n\");\n          i++;\n          displayNextMessage();\n        }, 0, 50);\n      } else {\n        const welcomeMessage = \"\\nWelcome to The Traveller Terminal.\\n\" + \"Type the name of a terminal to access its contents.\\n\\n\";\n        typeText(welcomeMessage, setInitText, () => {\n          setInitComplete(true);\n        }, 0, 50);\n      }\n    };\n    displayNextMessage();\n  }, []);\n\n  // Access code handler for selecting a terminal\n  const handleAccessCode = () => {\n    if (inputCode.trim().toLowerCase() === \"poop\") {\n      navigate(\"/poop\");\n      return;\n    }\n    const terminal = terminals[inputCode];\n    if (terminal) {\n      setActiveTerminal(terminal);\n      if (terminal.requiresRoll) {\n        setRollCheck({\n          difficulty: terminal.requiresRoll,\n          success: null\n        });\n      } else {\n        fetchLogs(terminal.logs);\n      }\n    } else {\n      typeText(\"ACCESS DENIED. INVALID CODE.\", setTerminalData);\n    }\n    setInputCode(\"\");\n  };\n\n  // Roll check for the terminal itself\n  const handleRollCheck = passed => {\n    if (passed) {\n      if (activeTerminal) {\n        fetchLogs(activeTerminal.logs);\n      } else {\n        typeText(\"ERROR: Terminal not found.\", setTerminalData);\n      }\n    } else {\n      typeText(\"ACCESS DENIED. INSUFFICIENT CLEARANCE.\", setTerminalData);\n    }\n    setRollCheck(null);\n  };\n\n  // Roll check for special logs (after password failures or for logs that require a roll)\n  const handleSpecialRollCheck = passed => {\n    if (passed) {\n      if (selectedLogData) {\n        // If it's a grouped log with sub-logs, open the audio logs page.\n        if (selectedLogData.logs) {\n          setAudioLogsData(selectedLogData.logs);\n          setShowAudioLogsPage(true);\n        } else {\n          setDisplayedText(\"\");\n          setLogTypingComplete(false);\n          const message = formatLogMessage(selectedLogData, true);\n          typeText(message, setDisplayedText, () => {\n            setLogTypingComplete(true);\n          });\n        }\n      } else {\n        typeText(\"ERROR: Log not found.\", setTerminalData);\n      }\n    } else {\n      if (selectedLogData && selectedLogData.roll_check && selectedLogData.roll_check.on_failure) {\n        typeText(selectedLogData.roll_check.on_failure, setTerminalData);\n      } else {\n        typeText(\"ACCESS DENIED. INSUFFICIENT CLEARANCE.\", setTerminalData);\n      }\n      setSelectedLogData(null);\n    }\n    setSpecialRollCheck(null);\n    setPasswordAttempts(0);\n    setIsPasswordUnlocked(false);\n    setPasswordInput(\"\");\n  };\n\n  // Fetch logs from the provided path\n  const fetchLogs = async logPath => {\n    try {\n      const response = await fetch(logPath);\n      const data = await response.json();\n      if (Array.isArray(data)) {\n        setLogData(data);\n      } else {\n        setSelectedLogData(data);\n        setDisplayedText(\"\");\n        setLogTypingComplete(false);\n        const message = formatLogMessage(data, false);\n        typeText(message, setDisplayedText, () => {\n          setLogTypingComplete(true);\n        });\n      }\n    } catch (error) {\n      typeText(\"ERROR LOADING LOGS.\", setTerminalData);\n    }\n  };\n\n  // Handler for when a log is clicked\n  const handleLogClick = log => {\n    setSelectedLogData(log);\n    setExpandedGroup(null);\n    setPasswordAttempts(0);\n    setPasswordInput(\"\");\n    setIsPasswordUnlocked(false);\n    if (log.logs) {\n      // For grouped logs, prompt for a password if required.\n      if (log.requires_password) {\n        setRequiresPassword(true);\n      } else {\n        setAudioLogsData(log.logs);\n        setShowAudioLogsPage(true);\n      }\n    } else if (log.requires_password) {\n      setRequiresPassword(true);\n    } else {\n      if (log.requires_roll && log.roll_check && log.roll_check.difficulty === 10) {\n        setSpecialRollCheck({\n          difficulty: log.roll_check.difficulty\n        });\n      } else {\n        setDisplayedText(\"\");\n        setLogTypingComplete(false);\n        const message = formatLogMessage(log, false);\n        typeText(message, setDisplayedText, () => {\n          setLogTypingComplete(true);\n        });\n      }\n    }\n  };\n\n  // Handler for submitting a password for a password-protected log\n  const handlePasswordSubmit = () => {\n    if (passwordInput === selectedLogData.password) {\n      setIsPasswordUnlocked(true);\n      setRequiresPassword(false);\n      if (selectedLogData.logs) {\n        setAudioLogsData(selectedLogData.logs);\n        setShowAudioLogsPage(true);\n      } else {\n        setDisplayedText(\"\");\n        setLogTypingComplete(false);\n        const message = formatLogMessage(selectedLogData, false);\n        typeText(message, setDisplayedText, () => {\n          setLogTypingComplete(true);\n        });\n      }\n    } else {\n      const attempts = passwordAttempts + 1;\n      setPasswordAttempts(attempts);\n      if (attempts >= (selectedLogData.attemptsAllowed || 3)) {\n        setRequiresPassword(false);\n        setSpecialRollCheck({\n          difficulty: selectedLogData.roll_check.difficulty\n        });\n      } else {\n        typeText(\"Incorrect password. Please try again.\", setTerminalData);\n      }\n    }\n  };\n\n  // If showAudioLogsPage is true, render a separate page for grouped audio logs.\n  if (showAudioLogsPage) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col items-center h-screen bg-black\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-green-400 font-mono text-xl my-4\",\n        children: \"Encrypted Audio Logs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full max-w-md border-green-400 border-2 p-4 overflow-auto\",\n        children: [audioLogsData.map((log, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: \"20px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-green-400 font-mono\",\n            children: log.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-green-400 font-mono\",\n            style: {\n              whiteSpace: \"pre-wrap\"\n            },\n            children: \"Author: \" + log.author + \"\\n\" + \"Date: \" + log.date + \"\\n\\n\" + log.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 15\n          }, this), log.audio_file && /*#__PURE__*/_jsxDEV(\"audio\", {\n            controls: true,\n            style: {\n              backgroundColor: \"black\",\n              border: \"1px solid #33ff33\",\n              borderRadius: \"5px\",\n              width: \"100%\",\n              marginTop: \"10px\",\n              color: \"#33ff33\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"source\", {\n              src: log.audio_file,\n              type: \"audio/mp3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 19\n            }, this), \"Your browser does not support the audio element.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500 mt-4\",\n          onClick: () => {\n            setShowAudioLogsPage(false);\n            setAudioLogsData([]);\n            setSelectedLogData(null);\n          },\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center h-screen bg-black\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontFamily: \"monospace\",\n        color: \"#33ff33\",\n        whiteSpace: \"pre-wrap\",\n        marginBottom: \"10px\",\n        textAlign: \"center\"\n      },\n      children: initText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      className: \"w-full max-w-md border-green-400 border-2\",\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(motion.div, {\n          initial: {\n            opacity: 0\n          },\n          animate: {\n            opacity: 1\n          },\n          transition: {\n            duration: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"terminal overflow-auto h-[300px]\",\n            children: specialRollCheck ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Did you pass the \", specialRollCheck.difficulty, \"+ check for\", \" \", selectedLogData ? selectedLogData.title : \"this file\", \"?\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 316,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex gap-2\",\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  className: \"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\",\n                  onClick: () => handleSpecialRollCheck(true),\n                  children: \"Yes\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 321,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  className: \"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\",\n                  onClick: () => handleSpecialRollCheck(false),\n                  children: \"No\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 327,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 17\n            }, this) : rollCheck ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Did you pass the \", rollCheck.difficulty, \"+ Electronics (Computers) check?\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 337,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex gap-2\",\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  className: \"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\",\n                  onClick: () => handleRollCheck(true),\n                  children: \"Yes\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 341,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  className: \"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\",\n                  onClick: () => handleRollCheck(false),\n                  children: \"No\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 347,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 17\n            }, this) : selectedLogData && requiresPassword && !isPasswordUnlocked ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Password required for \", selectedLogData.title, \". Attempts remaining:\", \" \", (selectedLogData.attemptsAllowed || 3) - passwordAttempts]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 357,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                className: \"bg-black text-green-400 border border-green-400 px-3 py-2 font-mono focus:outline-none\",\n                placeholder: \"Enter Password\",\n                value: passwordInput,\n                onChange: e => setPasswordInput(e.target.value),\n                type: \"password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 361,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                className: \"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500 mt-2\",\n                onClick: handlePasswordSubmit,\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 17\n            }, this) : selectedLogData ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  whiteSpace: \"pre-wrap\"\n                },\n                children: selectedLogData.roll_check && selectedLogData.roll_check.on_success ? formatLogMessage(selectedLogData, true) : formatLogMessage(selectedLogData, false)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 377,\n                columnNumber: 19\n              }, this), selectedLogData.audio_file && /*#__PURE__*/_jsxDEV(\"audio\", {\n                controls: true,\n                style: {\n                  backgroundColor: \"black\",\n                  border: \"1px solid #33ff33\",\n                  borderRadius: \"5px\",\n                  width: \"100%\",\n                  marginTop: \"10px\",\n                  color: \"#33ff33\"\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"source\", {\n                  src: selectedLogData.audio_file,\n                  type: \"audio/mp3\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 394,\n                  columnNumber: 23\n                }, this), \"Your browser does not support the audio element.\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 383,\n                columnNumber: 21\n              }, this), logTypingComplete && /*#__PURE__*/_jsxDEV(Button, {\n                className: \"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500 mt-2\",\n                onClick: () => {\n                  setSelectedLogData(null);\n                  setDisplayedText(\"\");\n                  setLogTypingComplete(false);\n                },\n                children: \"Back\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 17\n            }, this) : logData ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: logData.map((log, index) => {\n                if (log.logs) {\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: /*#__PURE__*/_jsxDEV(\"p\", {\n                      onClick: () => handleLogClick(log),\n                      style: {\n                        cursor: \"pointer\",\n                        textDecoration: \"underline\"\n                      },\n                      children: log.title\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 417,\n                      columnNumber: 27\n                    }, this)\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 416,\n                    columnNumber: 25\n                  }, this);\n                } else {\n                  return /*#__PURE__*/_jsxDEV(\"p\", {\n                    onClick: () => handleLogClick(log),\n                    style: {\n                      cursor: \"pointer\",\n                      textDecoration: \"underline\"\n                    },\n                    children: log.title\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 427,\n                    columnNumber: 25\n                  }, this);\n                }\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"glitch-text\",\n              children: terminalData || \"ENTER ACCESS CODE TO PROCEED\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4 flex gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            className: \"bg-black text-green-400 border border-green-400 px-3 py-2 font-mono focus:outline-none\",\n            placeholder: \"Enter Access Code...\",\n            value: inputCode,\n            onChange: e => setInputCode(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            className: \"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\",\n            onClick: handleAccessCode,\n            children: \"Enter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 298,\n    columnNumber: 5\n  }, this);\n}\n_s(TravellerTerminal, \"sKFgXqYTFtgjgathaMvQhQc3dlc=\", false, function () {\n  return [useNavigate];\n});\n_c = TravellerTerminal;\nvar _c;\n$RefreshReg$(_c, \"TravellerTerminal\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Card","CardContent","Input","Button","motion","useNavigate","jsxDEV","_jsxDEV","terminals","requiresRoll","logs","formatLogMessage","log","includeRoll","message","roll_check","on_success","author","date","content","typeText","text","setState","callback","index","delay","length","prev","setTimeout","TravellerTerminal","_s","navigate","initText","setInitText","initComplete","setInitComplete","hasInitialized","inputCode","setInputCode","terminalData","setTerminalData","logData","setLogData","rollCheck","setRollCheck","specialRollCheck","setSpecialRollCheck","activeTerminal","setActiveTerminal","selectedLogData","setSelectedLogData","displayedText","setDisplayedText","logTypingComplete","setLogTypingComplete","requiresPassword","setRequiresPassword","passwordInput","setPasswordInput","passwordAttempts","setPasswordAttempts","isPasswordUnlocked","setIsPasswordUnlocked","expandedGroup","setExpandedGroup","showAudioLogsPage","setShowAudioLogsPage","audioLogsData","setAudioLogsData","current","loadingMessages","i","displayNextMessage","welcomeMessage","handleAccessCode","trim","toLowerCase","terminal","difficulty","success","fetchLogs","handleRollCheck","passed","handleSpecialRollCheck","on_failure","logPath","response","fetch","data","json","Array","isArray","error","handleLogClick","requires_password","requires_roll","handlePasswordSubmit","password","attempts","attemptsAllowed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","style","marginBottom","title","whiteSpace","audio_file","controls","backgroundColor","border","borderRadius","width","marginTop","color","src","type","onClick","fontFamily","textAlign","div","initial","opacity","animate","transition","duration","placeholder","value","onChange","e","target","cursor","textDecoration","_c","$RefreshReg$"],"sources":["C:/Users/James/Desktop/traveller-terminal-v5/src/components/TravellerTerminal.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Card, CardContent } from \"../ui/Card\";\r\nimport { Input } from \"../ui/Input\";\r\nimport { Button } from \"../ui/Button\";\r\nimport { motion } from \"framer-motion\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n// Terminal definitions including labpc81 and vanagandr001\r\nconst terminals = {\r\n  \"lysani01\": { requiresRoll: 8, logs: \"/logs/lysani01.json\" },\r\n  \"s.elara01\": { requiresRoll: false, logs: \"/logs/s.elara01.json\" },\r\n  \"slocombe875\": { requiresRoll: 8, logs: \"/logs/slocombe875.json\" },\r\n  \"waferterm01\": { requiresRoll: false, logs: \"/logs/waferterm01.json\" },\r\n  \"labpc81\": { requiresRoll: 6, logs: \"/logs/labpc81.json\" },\r\n  \"vanagandr001\": { requiresRoll: 7, logs: \"/logs/vanagandr001.json\" }\r\n};\r\n\r\n/**\r\n * Helper function that returns a formatted message string for a log.\r\n * If includeRoll is true and an on_success message is available, it is placed at the top.\r\n */\r\nconst formatLogMessage = (log, includeRoll = false) => {\r\n  let message = \"\";\r\n  if (includeRoll && log.roll_check && log.roll_check.on_success) {\r\n    message += log.roll_check.on_success + \"\\n\\n\";\r\n  }\r\n  message += \"Author: \" + log.author + \"\\n\";\r\n  message += \"Date: \" + log.date + \"\\n\\n\";\r\n  message += log.content;\r\n  return message;\r\n};\r\n\r\n// Generic typing function with adjustable delay\r\nconst typeText = (text, setState, callback = null, index = 0, delay = 30) => {\r\n  if (index < text.length) {\r\n    setState(prev => prev + text[index]);\r\n    setTimeout(() => typeText(text, setState, callback, index + 1, delay), delay);\r\n  } else {\r\n    if (callback) callback();\r\n  }\r\n};\r\n\r\nexport default function TravellerTerminal() {\r\n  const navigate = useNavigate();\r\n\r\n  // Initialization states\r\n  const [initText, setInitText] = useState(\"\");\r\n  const [initComplete, setInitComplete] = useState(false);\r\n  const hasInitialized = useRef(false);\r\n\r\n  // Terminal and log states\r\n  const [inputCode, setInputCode] = useState(\"\");\r\n  const [terminalData, setTerminalData] = useState(\"\");\r\n  const [logData, setLogData] = useState(null);\r\n  const [rollCheck, setRollCheck] = useState(null);\r\n  const [specialRollCheck, setSpecialRollCheck] = useState(null);\r\n  const [activeTerminal, setActiveTerminal] = useState(null);\r\n  const [selectedLogData, setSelectedLogData] = useState(null);\r\n  const [displayedText, setDisplayedText] = useState(\"\");\r\n  const [logTypingComplete, setLogTypingComplete] = useState(false);\r\n\r\n  // Password-related states\r\n  const [requiresPassword, setRequiresPassword] = useState(false);\r\n  const [passwordInput, setPasswordInput] = useState(\"\");\r\n  const [passwordAttempts, setPasswordAttempts] = useState(0);\r\n  const [isPasswordUnlocked, setIsPasswordUnlocked] = useState(false);\r\n\r\n  // State for grouped logs and for showing a separate page for audio logs\r\n  const [expandedGroup, setExpandedGroup] = useState(null);\r\n  const [showAudioLogsPage, setShowAudioLogsPage] = useState(false);\r\n  const [audioLogsData, setAudioLogsData] = useState([]);\r\n\r\n  // Initialization effect: runs once.\r\n  useEffect(() => {\r\n    if (hasInitialized.current) return;\r\n    hasInitialized.current = true;\r\n\r\n    const loadingMessages = [\r\n      \"Initializing system...\",\r\n      \"Connecting to network...\",\r\n      \"Loading secure protocols...\",\r\n      \"The Traveller Terminal is now online.\"\r\n    ];\r\n    let i = 0;\r\n    const displayNextMessage = () => {\r\n      if (i < loadingMessages.length) {\r\n        typeText(loadingMessages[i] + \"\\n\", setInitText, () => {\r\n          setInitText(prev => prev + \"\\n\");\r\n          i++;\r\n          displayNextMessage();\r\n        }, 0, 50);\r\n      } else {\r\n        const welcomeMessage =\r\n          \"\\nWelcome to The Traveller Terminal.\\n\" +\r\n          \"Type the name of a terminal to access its contents.\\n\\n\";\r\n        typeText(welcomeMessage, setInitText, () => {\r\n          setInitComplete(true);\r\n        }, 0, 50);\r\n      }\r\n    };\r\n    displayNextMessage();\r\n  }, []);\r\n\r\n  // Access code handler for selecting a terminal\r\n  const handleAccessCode = () => {\r\n    if (inputCode.trim().toLowerCase() === \"poop\") {\r\n      navigate(\"/poop\");\r\n      return;\r\n    }\r\n    const terminal = terminals[inputCode];\r\n    if (terminal) {\r\n      setActiveTerminal(terminal);\r\n      if (terminal.requiresRoll) {\r\n        setRollCheck({ difficulty: terminal.requiresRoll, success: null });\r\n      } else {\r\n        fetchLogs(terminal.logs);\r\n      }\r\n    } else {\r\n      typeText(\"ACCESS DENIED. INVALID CODE.\", setTerminalData);\r\n    }\r\n    setInputCode(\"\");\r\n  };\r\n\r\n  // Roll check for the terminal itself\r\n  const handleRollCheck = (passed) => {\r\n    if (passed) {\r\n      if (activeTerminal) {\r\n        fetchLogs(activeTerminal.logs);\r\n      } else {\r\n        typeText(\"ERROR: Terminal not found.\", setTerminalData);\r\n      }\r\n    } else {\r\n      typeText(\"ACCESS DENIED. INSUFFICIENT CLEARANCE.\", setTerminalData);\r\n    }\r\n    setRollCheck(null);\r\n  };\r\n\r\n  // Roll check for special logs (after password failures or for logs that require a roll)\r\n  const handleSpecialRollCheck = (passed) => {\r\n    if (passed) {\r\n      if (selectedLogData) {\r\n        // If it's a grouped log with sub-logs, open the audio logs page.\r\n        if (selectedLogData.logs) {\r\n          setAudioLogsData(selectedLogData.logs);\r\n          setShowAudioLogsPage(true);\r\n        } else {\r\n          setDisplayedText(\"\");\r\n          setLogTypingComplete(false);\r\n          const message = formatLogMessage(selectedLogData, true);\r\n          typeText(message, setDisplayedText, () => {\r\n            setLogTypingComplete(true);\r\n          });\r\n        }\r\n      } else {\r\n        typeText(\"ERROR: Log not found.\", setTerminalData);\r\n      }\r\n    } else {\r\n      if (selectedLogData && selectedLogData.roll_check && selectedLogData.roll_check.on_failure) {\r\n        typeText(selectedLogData.roll_check.on_failure, setTerminalData);\r\n      } else {\r\n        typeText(\"ACCESS DENIED. INSUFFICIENT CLEARANCE.\", setTerminalData);\r\n      }\r\n      setSelectedLogData(null);\r\n    }\r\n    setSpecialRollCheck(null);\r\n    setPasswordAttempts(0);\r\n    setIsPasswordUnlocked(false);\r\n    setPasswordInput(\"\");\r\n  };\r\n\r\n  // Fetch logs from the provided path\r\n  const fetchLogs = async (logPath) => {\r\n    try {\r\n      const response = await fetch(logPath);\r\n      const data = await response.json();\r\n      if (Array.isArray(data)) {\r\n        setLogData(data);\r\n      } else {\r\n        setSelectedLogData(data);\r\n        setDisplayedText(\"\");\r\n        setLogTypingComplete(false);\r\n        const message = formatLogMessage(data, false);\r\n        typeText(message, setDisplayedText, () => {\r\n          setLogTypingComplete(true);\r\n        });\r\n      }\r\n    } catch (error) {\r\n      typeText(\"ERROR LOADING LOGS.\", setTerminalData);\r\n    }\r\n  };\r\n\r\n  // Handler for when a log is clicked\r\n  const handleLogClick = (log) => {\r\n    setSelectedLogData(log);\r\n    setExpandedGroup(null);\r\n    setPasswordAttempts(0);\r\n    setPasswordInput(\"\");\r\n    setIsPasswordUnlocked(false);\r\n\r\n    if (log.logs) {\r\n      // For grouped logs, prompt for a password if required.\r\n      if (log.requires_password) {\r\n        setRequiresPassword(true);\r\n      } else {\r\n        setAudioLogsData(log.logs);\r\n        setShowAudioLogsPage(true);\r\n      }\r\n    } else if (log.requires_password) {\r\n      setRequiresPassword(true);\r\n    } else {\r\n      if (log.requires_roll && log.roll_check && log.roll_check.difficulty === 10) {\r\n        setSpecialRollCheck({ difficulty: log.roll_check.difficulty });\r\n      } else {\r\n        setDisplayedText(\"\");\r\n        setLogTypingComplete(false);\r\n        const message = formatLogMessage(log, false);\r\n        typeText(message, setDisplayedText, () => {\r\n          setLogTypingComplete(true);\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  // Handler for submitting a password for a password-protected log\r\n  const handlePasswordSubmit = () => {\r\n    if (passwordInput === selectedLogData.password) {\r\n      setIsPasswordUnlocked(true);\r\n      setRequiresPassword(false);\r\n      if (selectedLogData.logs) {\r\n        setAudioLogsData(selectedLogData.logs);\r\n        setShowAudioLogsPage(true);\r\n      } else {\r\n        setDisplayedText(\"\");\r\n        setLogTypingComplete(false);\r\n        const message = formatLogMessage(selectedLogData, false);\r\n        typeText(message, setDisplayedText, () => {\r\n          setLogTypingComplete(true);\r\n        });\r\n      }\r\n    } else {\r\n      const attempts = passwordAttempts + 1;\r\n      setPasswordAttempts(attempts);\r\n      if (attempts >= (selectedLogData.attemptsAllowed || 3)) {\r\n        setRequiresPassword(false);\r\n        setSpecialRollCheck({ difficulty: selectedLogData.roll_check.difficulty });\r\n      } else {\r\n        typeText(\"Incorrect password. Please try again.\", setTerminalData);\r\n      }\r\n    }\r\n  };\r\n\r\n  // If showAudioLogsPage is true, render a separate page for grouped audio logs.\r\n  if (showAudioLogsPage) {\r\n    return (\r\n      <div className=\"flex flex-col items-center h-screen bg-black\">\r\n        <h1 className=\"text-green-400 font-mono text-xl my-4\">Encrypted Audio Logs</h1>\r\n        <div className=\"w-full max-w-md border-green-400 border-2 p-4 overflow-auto\">\r\n          {audioLogsData.map((log, index) => (\r\n            <div key={index} style={{ marginBottom: \"20px\" }}>\r\n              <h2 className=\"text-green-400 font-mono\">{log.title}</h2>\r\n              <p className=\"text-green-400 font-mono\" style={{ whiteSpace: \"pre-wrap\" }}>\r\n                { \"Author: \" + log.author + \"\\n\" + \"Date: \" + log.date + \"\\n\\n\" + log.content }\r\n              </p>\r\n              {log.audio_file && (\r\n                <audio\r\n                  controls\r\n                  style={{\r\n                    backgroundColor: \"black\",\r\n                    border: \"1px solid #33ff33\",\r\n                    borderRadius: \"5px\",\r\n                    width: \"100%\",\r\n                    marginTop: \"10px\",\r\n                    color: \"#33ff33\"\r\n                  }}\r\n                >\r\n                  <source src={log.audio_file} type=\"audio/mp3\" />\r\n                  Your browser does not support the audio element.\r\n                </audio>\r\n              )}\r\n            </div>\r\n          ))}\r\n          <Button\r\n            className=\"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500 mt-4\"\r\n            onClick={() => {\r\n              setShowAudioLogsPage(false);\r\n              setAudioLogsData([]);\r\n              setSelectedLogData(null);\r\n            }}\r\n          >\r\n            Back\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center h-screen bg-black\">\r\n      <div\r\n        style={{\r\n          fontFamily: \"monospace\",\r\n          color: \"#33ff33\",\r\n          whiteSpace: \"pre-wrap\",\r\n          marginBottom: \"10px\",\r\n          textAlign: \"center\"\r\n        }}\r\n      >\r\n        {initText}\r\n      </div>\r\n      <Card className=\"w-full max-w-md border-green-400 border-2\">\r\n        <CardContent>\r\n          <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 1 }}>\r\n            <div className=\"terminal overflow-auto h-[300px]\">\r\n              {specialRollCheck ? (\r\n                <div>\r\n                  <p>\r\n                    Did you pass the {specialRollCheck.difficulty}+ check for{\" \"}\r\n                    {selectedLogData ? selectedLogData.title : \"this file\"}?\r\n                  </p>\r\n                  <div className=\"flex gap-2\">\r\n                    <Button\r\n                      className=\"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\"\r\n                      onClick={() => handleSpecialRollCheck(true)}\r\n                    >\r\n                      Yes\r\n                    </Button>\r\n                    <Button\r\n                      className=\"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\"\r\n                      onClick={() => handleSpecialRollCheck(false)}\r\n                    >\r\n                      No\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              ) : rollCheck ? (\r\n                <div>\r\n                  <p>\r\n                    Did you pass the {rollCheck.difficulty}+ Electronics (Computers) check?\r\n                  </p>\r\n                  <div className=\"flex gap-2\">\r\n                    <Button\r\n                      className=\"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\"\r\n                      onClick={() => handleRollCheck(true)}\r\n                    >\r\n                      Yes\r\n                    </Button>\r\n                    <Button\r\n                      className=\"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\"\r\n                      onClick={() => handleRollCheck(false)}\r\n                    >\r\n                      No\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              ) : selectedLogData && requiresPassword && !isPasswordUnlocked ? (\r\n                <div>\r\n                  <p>\r\n                    Password required for {selectedLogData.title}. Attempts remaining:{\" \"}\r\n                    {(selectedLogData.attemptsAllowed || 3) - passwordAttempts}\r\n                  </p>\r\n                  <Input\r\n                    className=\"bg-black text-green-400 border border-green-400 px-3 py-2 font-mono focus:outline-none\"\r\n                    placeholder=\"Enter Password\"\r\n                    value={passwordInput}\r\n                    onChange={(e) => setPasswordInput(e.target.value)}\r\n                    type=\"password\"\r\n                  />\r\n                  <Button\r\n                    className=\"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500 mt-2\"\r\n                    onClick={handlePasswordSubmit}\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </div>\r\n              ) : selectedLogData ? (\r\n                <div>\r\n                  <div style={{ whiteSpace: \"pre-wrap\" }}>\r\n                    {selectedLogData.roll_check && selectedLogData.roll_check.on_success\r\n                      ? formatLogMessage(selectedLogData, true)\r\n                      : formatLogMessage(selectedLogData, false)}\r\n                  </div>\r\n                  {selectedLogData.audio_file && (\r\n                    <audio\r\n                      controls\r\n                      style={{\r\n                        backgroundColor: \"black\",\r\n                        border: \"1px solid #33ff33\",\r\n                        borderRadius: \"5px\",\r\n                        width: \"100%\",\r\n                        marginTop: \"10px\",\r\n                        color: \"#33ff33\"\r\n                      }}\r\n                    >\r\n                      <source src={selectedLogData.audio_file} type=\"audio/mp3\" />\r\n                      Your browser does not support the audio element.\r\n                    </audio>\r\n                  )}\r\n                  {logTypingComplete && (\r\n                    <Button\r\n                      className=\"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500 mt-2\"\r\n                      onClick={() => {\r\n                        setSelectedLogData(null);\r\n                        setDisplayedText(\"\");\r\n                        setLogTypingComplete(false);\r\n                      }}\r\n                    >\r\n                      Back\r\n                    </Button>\r\n                  )}\r\n                </div>\r\n              ) : logData ? (\r\n                <div>\r\n                  {logData.map((log, index) => {\r\n                    if (log.logs) {\r\n                      return (\r\n                        <div key={index}>\r\n                          <p\r\n                            onClick={() => handleLogClick(log)}\r\n                            style={{ cursor: \"pointer\", textDecoration: \"underline\" }}\r\n                          >\r\n                            {log.title}\r\n                          </p>\r\n                        </div>\r\n                      );\r\n                    } else {\r\n                      return (\r\n                        <p\r\n                          key={index}\r\n                          onClick={() => handleLogClick(log)}\r\n                          style={{ cursor: \"pointer\", textDecoration: \"underline\" }}\r\n                        >\r\n                          {log.title}\r\n                        </p>\r\n                      );\r\n                    }\r\n                  })}\r\n                </div>\r\n              ) : (\r\n                <p className=\"glitch-text\">\r\n                  {terminalData || \"ENTER ACCESS CODE TO PROCEED\"}\r\n                </p>\r\n              )}\r\n            </div>\r\n          </motion.div>\r\n          <div className=\"mt-4 flex gap-2\">\r\n            <Input\r\n              className=\"bg-black text-green-400 border border-green-400 px-3 py-2 font-mono focus:outline-none\"\r\n              placeholder=\"Enter Access Code...\"\r\n              value={inputCode}\r\n              onChange={(e) => setInputCode(e.target.value)}\r\n            />\r\n            <Button\r\n              className=\"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\"\r\n              onClick={handleAccessCode}\r\n            >\r\n              Enter\r\n            </Button>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}