{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\James\\\\Desktop\\\\traveller-terminal-v5\\\\src\\\\components\\\\TravellerTerminal.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Card, CardContent } from \"../ui/Card\";\nimport { Input } from \"../ui/Input\";\nimport { Button } from \"../ui/Button\";\nimport { motion } from \"framer-motion\";\nimport { useNavigate } from \"react-router-dom\";\n\n// Terminal definitions including all terminals\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst terminals = {\n  \"lysani01\": {\n    requiresRoll: 8,\n    logs: \"/logs/lysani01.json\"\n  },\n  \"s.elara01\": {\n    requiresRoll: false,\n    logs: \"/logs/s.elara01.json\"\n  },\n  \"slocombe875\": {\n    requiresRoll: 8,\n    logs: \"/logs/slocombe875.json\"\n  },\n  \"waferterm01\": {\n    requiresRoll: false,\n    logs: \"/logs/waferterm01.json\"\n  },\n  \"labpc81\": {\n    requiresRoll: 6,\n    logs: \"/logs/labpc81.json\"\n  },\n  \"vanagandr001\": {\n    requiresRoll: 8,\n    logs: \"/logs/vanagandr001.json\"\n  },\n  // New terminals for Caldonis:\n  \"blackcircuit01\": {\n    requiresRoll: 8,\n    logs: \"/logs/blackcircuit01.json\"\n  },\n  \"fuw01\": {\n    requiresRoll: 8,\n    logs: \"/logs/fuw01.json\"\n  },\n  \"azura01\": {\n    requiresRoll: 10,\n    logs: \"/logs/azura01.json\"\n  },\n  \"vennik01\": {\n    requiresRoll: 12,\n    logs: \"/logs/vennik01.json\",\n    requiresPassword: true,\n    password: \"vennik4ever\"\n  },\n  \"caldonis_public\": {\n    requiresRoll: false,\n    logs: \"/logs/caldonis_public.json\"\n  }\n};\nconst typeText = (text, setState, callback = null, index = 0, delay = 30) => {\n  if (index < text.length) {\n    setState(prev => prev + text[index]);\n    setTimeout(() => typeText(text, setState, callback, index + 1, delay), delay);\n  } else {\n    if (callback) callback();\n  }\n};\nexport default function TravellerTerminal() {\n  _s();\n  const navigate = useNavigate();\n  const [initText, setInitText] = useState(\"\");\n  const [initComplete, setInitComplete] = useState(false);\n  const hasInitialized = useRef(false);\n  const typingRef = useRef(null);\n  const [inputCode, setInputCode] = useState(\"\");\n  const [terminalData, setTerminalData] = useState(\"\");\n  const [logData, setLogData] = useState(null);\n  const [rollCheck, setRollCheck] = useState(null);\n  const [specialRollCheck, setSpecialRollCheck] = useState(null);\n  const [activeTerminal, setActiveTerminal] = useState(null);\n  const [selectedLogData, setSelectedLogData] = useState(null);\n  const [displayedText, setDisplayedText] = useState(\"\");\n  const [logTypingComplete, setLogTypingComplete] = useState(false);\n  const [currentView, setCurrentView] = useState(\"init\"); // \"init\", \"terminal\", \"log\"\n\n  // Password-related states\n  const [requiresPassword, setRequiresPassword] = useState(false);\n  const [passwordInput, setPasswordInput] = useState(\"\");\n  const [passwordAttempts, setPasswordAttempts] = useState(0);\n  const [isPasswordUnlocked, setIsPasswordUnlocked] = useState(false);\n  const [terminalPasswordInput, setTerminalPasswordInput] = useState(\"\");\n  const [terminalPasswordRequired, setTerminalPasswordRequired] = useState(false);\n\n  // Grouping state for grouped logs\n  const [expandedGroup, setExpandedGroup] = useState(null);\n  // State for displaying a separate page for grouped audio logs\n  const [showAudioLogsPage, setShowAudioLogsPage] = useState(false);\n  const [audioLogsData, setAudioLogsData] = useState([]);\n\n  // Function to handle keyboard events\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.key === \"Escape\") {\n        // Stop the typing animation and show full text\n        if (currentView === \"log\" && !logTypingComplete) {\n          setLogTypingComplete(true);\n          // Clear the typing timeout\n          if (typingRef.current) {\n            clearTimeout(typingRef.current);\n          }\n          // If this is a log with content, show it all\n          if (selectedLogData) {\n            let fullText = \"\";\n            if (selectedLogData.roll_check && selectedLogData.roll_check.on_success) {\n              fullText = selectedLogData.roll_check.on_success + \"\\n\\n\";\n            }\n            fullText += `Date: ${selectedLogData.date}\\nAuthor: ${selectedLogData.author}\\n\\n${selectedLogData.content}`;\n            setDisplayedText(fullText);\n          }\n        }\n        // Navigate back based on current view\n        else if (currentView === \"log\") {\n          handleBackToTerminal();\n        } else if (currentView === \"terminal\") {\n          handleBackToInit();\n        }\n      }\n    };\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, [currentView, logTypingComplete, selectedLogData]);\n  useEffect(() => {\n    if (hasInitialized.current) return;\n    hasInitialized.current = true;\n    const loadingMessages = [\"Initializing system...\", \"Connecting to network...\", \"Loading secure protocols...\", \"The Traveller Terminal is now online.\"];\n    let i = 0;\n    const displayNextMessage = () => {\n      if (i < loadingMessages.length) {\n        typeText(loadingMessages[i] + \"\\n\", setInitText, () => {\n          setInitText(prev => prev + \"\\n\");\n          i++;\n          displayNextMessage();\n        }, 0, 50);\n      } else {\n        const welcomeMessage = \"\\nWelcome to The Traveller Terminal.\\n\" + \"Type the name of a terminal to access its contents.\\n\\n\";\n        typeText(welcomeMessage, setInitText, () => {\n          setInitComplete(true);\n        }, 0, 50);\n      }\n    };\n    displayNextMessage();\n  }, []);\n  const handleAccessCode = () => {\n    // Check for our silly terminal first:\n    if (inputCode.trim().toLowerCase() === \"poop\") {\n      navigate(\"/poop\");\n      return;\n    }\n    const terminal = terminals[inputCode];\n    if (terminal) {\n      setActiveTerminal(terminal);\n      setCurrentView(\"terminal\");\n\n      // Check if the terminal requires a password\n      if (terminal.requiresPassword && !isPasswordUnlocked) {\n        setTerminalPasswordRequired(true);\n      } else if (terminal.requiresRoll) {\n        setRollCheck({\n          difficulty: terminal.requiresRoll,\n          success: null\n        });\n      } else {\n        fetchLogs(terminal.logs);\n      }\n    } else {\n      typeText(\"ACCESS DENIED. INVALID CODE.\", setTerminalData);\n    }\n    setInputCode(\"\");\n  };\n  const handleTerminalPasswordSubmit = () => {\n    if (activeTerminal && terminalPasswordInput === activeTerminal.password) {\n      setTerminalPasswordRequired(false);\n      setIsPasswordUnlocked(true);\n      if (activeTerminal.requiresRoll) {\n        setRollCheck({\n          difficulty: activeTerminal.requiresRoll,\n          success: null\n        });\n      } else {\n        fetchLogs(activeTerminal.logs);\n      }\n    } else {\n      setTerminalPasswordInput(\"\");\n      typeText(\"ACCESS DENIED. INVALID PASSWORD.\", setTerminalData);\n    }\n  };\n  const handleRollCheck = passed => {\n    if (passed) {\n      if (activeTerminal) {\n        fetchLogs(activeTerminal.logs);\n      } else {\n        typeText(\"ERROR: Terminal not found.\", setTerminalData);\n      }\n    } else {\n      typeText(\"ACCESS DENIED. INSUFFICIENT CLEARANCE.\", setTerminalData);\n    }\n    setRollCheck(null);\n  };\n  const handleSpecialRollCheck = passed => {\n    if (passed) {\n      if (selectedLogData) {\n        if (selectedLogData.logs) {\n          setAudioLogsData(selectedLogData.logs);\n          setShowAudioLogsPage(true);\n        } else {\n          setDisplayedText(\"\");\n          setLogTypingComplete(false);\n          setCurrentView(\"log\");\n          let message = \"\";\n          if (selectedLogData.roll_check && selectedLogData.roll_check.on_success) {\n            message = selectedLogData.roll_check.on_success + \"\\n\\n\";\n            message += `Date: ${selectedLogData.date}\\nAuthor: ${selectedLogData.author}\\n\\n${selectedLogData.content}`;\n          } else {\n            message = `Date: ${selectedLogData.date}\\nAuthor: ${selectedLogData.author}\\n\\n${selectedLogData.content}`;\n          }\n\n          // Store the typing function reference so we can cancel it with ESC key\n          const typeWithRef = (text, setState, callback = null, index = 0, delay = 30) => {\n            if (index < text.length) {\n              setState(prev => prev + text[index]);\n              typingRef.current = setTimeout(() => typeWithRef(text, setState, callback, index + 1, delay), delay);\n            } else {\n              typingRef.current = null;\n              if (callback) callback();\n            }\n          };\n          typeWithRef(message, setDisplayedText, () => {\n            setLogTypingComplete(true);\n          });\n        }\n      } else {\n        typeText(\"ERROR: Log not found.\", setTerminalData);\n      }\n    } else {\n      if (selectedLogData && selectedLogData.roll_check && selectedLogData.roll_check.on_failure) {\n        typeText(selectedLogData.roll_check.on_failure, setTerminalData);\n      } else {\n        typeText(\"ACCESS DENIED. INSUFFICIENT CLEARANCE.\", setTerminalData);\n      }\n      setSelectedLogData(null);\n    }\n    setSpecialRollCheck(null);\n    setPasswordAttempts(0);\n    setIsPasswordUnlocked(false);\n    setPasswordInput(\"\");\n  };\n  const fetchLogs = async logPath => {\n    try {\n      const response = await fetch(logPath);\n      const data = await response.json();\n      if (Array.isArray(data)) {\n        setLogData(data);\n      } else {\n        setSelectedLogData(data);\n        setCurrentView(\"log\");\n        setDisplayedText(\"\");\n        setLogTypingComplete(false);\n        const message = `Date: ${data.date}\\nAuthor: ${data.author}\\n\\n${data.content || \"No data available.\"}`;\n\n        // Store the typing function reference so we can cancel it with ESC key\n        const typeWithRef = (text, setState, callback = null, index = 0, delay = 30) => {\n          if (index < text.length) {\n            setState(prev => prev + text[index]);\n            typingRef.current = setTimeout(() => typeWithRef(text, setState, callback, index + 1, delay), delay);\n          } else {\n            typingRef.current = null;\n            if (callback) callback();\n          }\n        };\n        typeWithRef(message, setDisplayedText, () => {\n          setLogTypingComplete(true);\n        });\n      }\n    } catch (error) {\n      typeText(\"ERROR LOADING LOGS.\", setTerminalData);\n    }\n  };\n  const handleLogClick = log => {\n    setSelectedLogData(log);\n    setCurrentView(\"log\");\n    setExpandedGroup(null);\n    setPasswordAttempts(0);\n    setPasswordInput(\"\");\n    setIsPasswordUnlocked(false);\n    if (log.logs) {\n      if (log.requires_password) {\n        setRequiresPassword(true);\n      } else {\n        setAudioLogsData(log.logs);\n        setShowAudioLogsPage(true);\n      }\n    } else if (log.requires_password) {\n      setRequiresPassword(true);\n    } else {\n      if (log.requires_roll && log.roll_check && log.roll_check.difficulty >= 10) {\n        setSpecialRollCheck({\n          difficulty: log.roll_check.difficulty\n        });\n      } else {\n        setDisplayedText(\"\");\n        setLogTypingComplete(false);\n        const message = `Date: ${log.date}\\nAuthor: ${log.author}\\n\\n${log.content}`;\n\n        // Store the typing function reference so we can cancel it with ESC key\n        const typeWithRef = (text, setState, callback = null, index = 0, delay = 30) => {\n          if (index < text.length) {\n            setState(prev => prev + text[index]);\n            typingRef.current = setTimeout(() => typeWithRef(text, setState, callback, index + 1, delay), delay);\n          } else {\n            typingRef.current = null;\n            if (callback) callback();\n          }\n        };\n        typeWithRef(message, setDisplayedText, () => {\n          setLogTypingComplete(true);\n        });\n      }\n    }\n  };\n  const handlePasswordSubmit = () => {\n    if (passwordInput === selectedLogData.password) {\n      setIsPasswordUnlocked(true);\n      setRequiresPassword(false);\n      if (selectedLogData.logs) {\n        setAudioLogsData(selectedLogData.logs);\n        setShowAudioLogsPage(true);\n      } else {\n        setDisplayedText(\"\");\n        setLogTypingComplete(false);\n        const message = `Date: ${selectedLogData.date}\\nAuthor: ${selectedLogData.author}\\n\\n${selectedLogData.content}`;\n        typeText(message, setDisplayedText, () => {\n          setLogTypingComplete(true);\n        });\n      }\n    } else {\n      const attempts = passwordAttempts + 1;\n      setPasswordAttempts(attempts);\n      if (attempts >= (selectedLogData.attemptsAllowed || 3)) {\n        setRequiresPassword(false);\n        setSpecialRollCheck({\n          difficulty: selectedLogData.roll_check.difficulty\n        });\n      } else {\n        typeText(\"Incorrect password. Please try again.\", setTerminalData);\n      }\n    }\n  };\n  const handleBackToTerminal = () => {\n    setSelectedLogData(null);\n    setDisplayedText(\"\");\n    setLogTypingComplete(false);\n    setCurrentView(\"terminal\");\n    // Cancel any ongoing typing\n    if (typingRef.current) {\n      clearTimeout(typingRef.current);\n      typingRef.current = null;\n    }\n  };\n  const handleBackToInit = () => {\n    setLogData(null);\n    setActiveTerminal(null);\n    setTerminalData(\"\");\n    setCurrentView(\"init\");\n    setTerminalPasswordRequired(false);\n    setTerminalPasswordInput(\"\");\n    setIsPasswordUnlocked(false);\n  };\n  if (showAudioLogsPage) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col items-center h-screen bg-black\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-green-400 font-mono text-xl my-4\",\n        children: \"Encrypted Audio Logs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full max-w-md border-green-400 border-2 p-4 overflow-auto\",\n        children: [audioLogsData.map((log, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginBottom: \"20px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-green-400 font-mono\",\n            children: log.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-green-400 font-mono\",\n            style: {\n              whiteSpace: \"pre-wrap\"\n            },\n            children: log.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 15\n          }, this), log.audio_file && /*#__PURE__*/_jsxDEV(\"audio\", {\n            controls: true,\n            style: {\n              backgroundColor: \"black\",\n              border: \"1px solid #33ff33\",\n              borderRadius: \"5px\",\n              width: \"100%\",\n              marginTop: \"10px\",\n              color: \"#33ff33\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"source\", {\n              src: log.audio_file,\n              type: \"audio/mp3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 19\n            }, this), \"Your browser does not support the audio element.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500 mt-4\",\n          onClick: () => {\n            setShowAudioLogsPage(false);\n            setAudioLogsData([]);\n            setSelectedLogData(null);\n            setCurrentView(\"terminal\");\n          },\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center h-screen bg-black\",\n    children: [currentView === \"init\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontFamily: \"monospace\",\n        color: \"#33ff33\",\n        whiteSpace: \"pre-wrap\",\n        marginBottom: \"10px\",\n        textAlign: \"center\"\n      },\n      children: initText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      className: \"w-full max-w-md border-green-400 border-2\",\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(motion.div, {\n          initial: {\n            opacity: 0\n          },\n          animate: {\n            opacity: 1\n          },\n          transition: {\n            duration: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"terminal overflow-auto h-[300px]\",\n            children: terminalPasswordRequired ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Terminal requires password authentication.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 445,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mt-4\",\n                children: [/*#__PURE__*/_jsxDEV(Input, {\n                  className: \"bg-black text-green-400 border border-green-400 px-3 py-2 font-mono focus:outline-none\",\n                  placeholder: \"Enter Password\",\n                  value: terminalPasswordInput,\n                  onChange: e => setTerminalPasswordInput(e.target.value),\n                  type: \"password\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 449,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex gap-2 mt-2\",\n                  children: [/*#__PURE__*/_jsxDEV(Button, {\n                    className: \"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\",\n                    onClick: handleTerminalPasswordSubmit,\n                    children: \"Submit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 457,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    className: \"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\",\n                    onClick: handleBackToInit,\n                    children: \"Back\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 463,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 456,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 448,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 17\n            }, this) : specialRollCheck ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Did you pass the \", specialRollCheck.difficulty, \"+ check for\", \" \", selectedLogData ? selectedLogData.title : \"this file\", \"?\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 474,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex gap-2\",\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  className: \"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\",\n                  onClick: () => handleSpecialRollCheck(true),\n                  children: \"Yes\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 479,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  className: \"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\",\n                  onClick: () => handleSpecialRollCheck(false),\n                  children: \"No\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 485,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 478,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 17\n            }, this) : rollCheck ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Did you pass the \", rollCheck.difficulty, \"+ Electronics (Computers) check?\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 495,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex gap-2\",\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  className: \"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\",\n                  onClick: () => handleRollCheck(true),\n                  children: \"Yes\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 499,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  className: \"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\",\n                  onClick: () => handleRollCheck(false),\n                  children: \"No\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 505,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 498,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 17\n            }, this) : selectedLogData && requiresPassword && !isPasswordUnlocked ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Password required for \", selectedLogData.title, \". Attempts remaining:\", \" \", (selectedLogData.attemptsAllowed || 3) - passwordAttempts]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 515,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                className: \"bg-black text-green-400 border border-green-400 px-3 py-2 font-mono focus:outline-none\",\n                placeholder: \"Enter Password\",\n                value: passwordInput,\n                onChange: e => setPasswordInput(e.target.value),\n                type: \"password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 519,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex gap-2 mt-2\",\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  className: \"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\",\n                  onClick: handlePasswordSubmit,\n                  children: \"Submit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 527,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  className: \"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\",\n                  onClick: handleBackToTerminal,\n                  children: \"Back\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 533,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 526,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 514,\n              columnNumber: 17\n            }, this) : selectedLogData ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  whiteSpace: \"pre-wrap\"\n                },\n                children: displayedText\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 543,\n                columnNumber: 19\n              }, this), selectedLogData.audio_file && /*#__PURE__*/_jsxDEV(\"audio\", {\n                controls: true,\n                style: {\n                  backgroundColor: \"black\",\n                  border: \"1px solid #33ff33\",\n                  borderRadius: \"5px\",\n                  width: \"100%\",\n                  marginTop: \"10px\",\n                  color: \"#33ff33\"\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"source\", {\n                  src: selectedLogData.audio_file,\n                  type: \"audio/mp3\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 556,\n                  columnNumber: 23\n                }, this), \"Your browser does not support the audio element.\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 545,\n                columnNumber: 21\n              }, this), logTypingComplete && /*#__PURE__*/_jsxDEV(Button, {\n                className: \"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500 mt-2\",\n                onClick: handleBackToTerminal,\n                children: \"Back\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 561,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 542,\n              columnNumber: 17\n            }, this) : logData ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [logData.map((log, index) => {\n                if (log.logs) {\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: /*#__PURE__*/_jsxDEV(\"p\", {\n                      onClick: () => handleLogClick(log),\n                      style: {\n                        cursor: \"pointer\",\n                        textDecoration: \"underline\"\n                      },\n                      children: log.title\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 575,\n                      columnNumber: 27\n                    }, this)\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 574,\n                    columnNumber: 25\n                  }, this);\n                } else {\n                  return /*#__PURE__*/_jsxDEV(\"p\", {\n                    onClick: () => handleLogClick(log),\n                    style: {\n                      cursor: \"pointer\",\n                      textDecoration: \"underline\"\n                    },\n                    children: log.title\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 585,\n                    columnNumber: 25\n                  }, this);\n                }\n              }), /*#__PURE__*/_jsxDEV(Button, {\n                className: \"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500 mt-2\",\n                onClick: handleBackToInit,\n                children: \"Back\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 595,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 570,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"glitch-text\",\n              children: terminalData || \"ENTER ACCESS CODE TO PROCEED\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 603,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4 flex gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            className: \"bg-black text-green-400 border border-green-400 px-3 py-2 font-mono focus:outline-none\",\n            placeholder: \"Enter Access Code...\",\n            value: inputCode,\n            onChange: e => setInputCode(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 610,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            className: \"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\",\n            onClick: handleAccessCode,\n            children: \"Enter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 616,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 425,\n    columnNumber: 5\n  }, this);\n}\n_s(TravellerTerminal, \"rG9sWH1uz73DQp69gexPszpz5ho=\", false, function () {\n  return [useNavigate];\n});\n_c = TravellerTerminal;\nvar _c;\n$RefreshReg$(_c, \"TravellerTerminal\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Card","CardContent","Input","Button","motion","useNavigate","jsxDEV","_jsxDEV","terminals","requiresRoll","logs","requiresPassword","password","typeText","text","setState","callback","index","delay","length","prev","setTimeout","TravellerTerminal","_s","navigate","initText","setInitText","initComplete","setInitComplete","hasInitialized","typingRef","inputCode","setInputCode","terminalData","setTerminalData","logData","setLogData","rollCheck","setRollCheck","specialRollCheck","setSpecialRollCheck","activeTerminal","setActiveTerminal","selectedLogData","setSelectedLogData","displayedText","setDisplayedText","logTypingComplete","setLogTypingComplete","currentView","setCurrentView","setRequiresPassword","passwordInput","setPasswordInput","passwordAttempts","setPasswordAttempts","isPasswordUnlocked","setIsPasswordUnlocked","terminalPasswordInput","setTerminalPasswordInput","terminalPasswordRequired","setTerminalPasswordRequired","expandedGroup","setExpandedGroup","showAudioLogsPage","setShowAudioLogsPage","audioLogsData","setAudioLogsData","handleKeyDown","e","key","current","clearTimeout","fullText","roll_check","on_success","date","author","content","handleBackToTerminal","handleBackToInit","window","addEventListener","removeEventListener","loadingMessages","i","displayNextMessage","welcomeMessage","handleAccessCode","trim","toLowerCase","terminal","difficulty","success","fetchLogs","handleTerminalPasswordSubmit","handleRollCheck","passed","handleSpecialRollCheck","message","typeWithRef","on_failure","logPath","response","fetch","data","json","Array","isArray","error","handleLogClick","log","requires_password","requires_roll","handlePasswordSubmit","attempts","attemptsAllowed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","style","marginBottom","title","whiteSpace","audio_file","controls","backgroundColor","border","borderRadius","width","marginTop","color","src","type","onClick","fontFamily","textAlign","div","initial","opacity","animate","transition","duration","placeholder","value","onChange","target","cursor","textDecoration","_c","$RefreshReg$"],"sources":["C:/Users/James/Desktop/traveller-terminal-v5/src/components/TravellerTerminal.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Card, CardContent } from \"../ui/Card\";\r\nimport { Input } from \"../ui/Input\";\r\nimport { Button } from \"../ui/Button\";\r\nimport { motion } from \"framer-motion\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n// Terminal definitions including all terminals\r\nconst terminals = {\r\n  \"lysani01\": { requiresRoll: 8, logs: \"/logs/lysani01.json\" },\r\n  \"s.elara01\": { requiresRoll: false, logs: \"/logs/s.elara01.json\" },\r\n  \"slocombe875\": { requiresRoll: 8, logs: \"/logs/slocombe875.json\" },\r\n  \"waferterm01\": { requiresRoll: false, logs: \"/logs/waferterm01.json\" },\r\n  \"labpc81\": { requiresRoll: 6, logs: \"/logs/labpc81.json\" },\r\n  \"vanagandr001\": { requiresRoll: 8, logs: \"/logs/vanagandr001.json\" },\r\n  // New terminals for Caldonis:\r\n  \"blackcircuit01\": { requiresRoll: 8, logs: \"/logs/blackcircuit01.json\" },\r\n  \"fuw01\": { requiresRoll: 8, logs: \"/logs/fuw01.json\" },\r\n  \"azura01\": { requiresRoll: 10, logs: \"/logs/azura01.json\" },\r\n  \"vennik01\": { \r\n    requiresRoll: 12, \r\n    logs: \"/logs/vennik01.json\",\r\n    requiresPassword: true,\r\n    password: \"vennik4ever\"\r\n  },\r\n  \"caldonis_public\": { requiresRoll: false, logs: \"/logs/caldonis_public.json\" }\r\n};\r\n\r\nconst typeText = (text, setState, callback = null, index = 0, delay = 30) => {\r\n  if (index < text.length) {\r\n    setState(prev => prev + text[index]);\r\n    setTimeout(() => typeText(text, setState, callback, index + 1, delay), delay);\r\n  } else {\r\n    if (callback) callback();\r\n  }\r\n};\r\n\r\nexport default function TravellerTerminal() {\r\n  const navigate = useNavigate();\r\n  const [initText, setInitText] = useState(\"\");\r\n  const [initComplete, setInitComplete] = useState(false);\r\n  const hasInitialized = useRef(false);\r\n  const typingRef = useRef(null);\r\n  \r\n  const [inputCode, setInputCode] = useState(\"\");\r\n  const [terminalData, setTerminalData] = useState(\"\");\r\n  const [logData, setLogData] = useState(null);\r\n  const [rollCheck, setRollCheck] = useState(null);\r\n  const [specialRollCheck, setSpecialRollCheck] = useState(null);\r\n  const [activeTerminal, setActiveTerminal] = useState(null);\r\n  const [selectedLogData, setSelectedLogData] = useState(null);\r\n  const [displayedText, setDisplayedText] = useState(\"\");\r\n  const [logTypingComplete, setLogTypingComplete] = useState(false);\r\n  const [currentView, setCurrentView] = useState(\"init\"); // \"init\", \"terminal\", \"log\"\r\n\r\n  // Password-related states\r\n  const [requiresPassword, setRequiresPassword] = useState(false);\r\n  const [passwordInput, setPasswordInput] = useState(\"\");\r\n  const [passwordAttempts, setPasswordAttempts] = useState(0);\r\n  const [isPasswordUnlocked, setIsPasswordUnlocked] = useState(false);\r\n  const [terminalPasswordInput, setTerminalPasswordInput] = useState(\"\");\r\n  const [terminalPasswordRequired, setTerminalPasswordRequired] = useState(false);\r\n\r\n  // Grouping state for grouped logs\r\n  const [expandedGroup, setExpandedGroup] = useState(null);\r\n  // State for displaying a separate page for grouped audio logs\r\n  const [showAudioLogsPage, setShowAudioLogsPage] = useState(false);\r\n  const [audioLogsData, setAudioLogsData] = useState([]);\r\n\r\n  // Function to handle keyboard events\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      if (e.key === \"Escape\") {\r\n        // Stop the typing animation and show full text\r\n        if (currentView === \"log\" && !logTypingComplete) {\r\n          setLogTypingComplete(true);\r\n          // Clear the typing timeout\r\n          if (typingRef.current) {\r\n            clearTimeout(typingRef.current);\r\n          }\r\n          // If this is a log with content, show it all\r\n          if (selectedLogData) {\r\n            let fullText = \"\";\r\n            if (selectedLogData.roll_check && selectedLogData.roll_check.on_success) {\r\n              fullText = selectedLogData.roll_check.on_success + \"\\n\\n\";\r\n            }\r\n            fullText += `Date: ${selectedLogData.date}\\nAuthor: ${selectedLogData.author}\\n\\n${selectedLogData.content}`;\r\n            setDisplayedText(fullText);\r\n          }\r\n        }\r\n        // Navigate back based on current view\r\n        else if (currentView === \"log\") {\r\n          handleBackToTerminal();\r\n        } \r\n        else if (currentView === \"terminal\") {\r\n          handleBackToInit();\r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"keydown\", handleKeyDown);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleKeyDown);\r\n    };\r\n  }, [currentView, logTypingComplete, selectedLogData]);\r\n\r\n  useEffect(() => {\r\n    if (hasInitialized.current) return;\r\n    hasInitialized.current = true;\r\n    const loadingMessages = [\r\n      \"Initializing system...\",\r\n      \"Connecting to network...\",\r\n      \"Loading secure protocols...\",\r\n      \"The Traveller Terminal is now online.\"\r\n    ];\r\n    let i = 0;\r\n    const displayNextMessage = () => {\r\n      if (i < loadingMessages.length) {\r\n        typeText(loadingMessages[i] + \"\\n\", setInitText, () => {\r\n          setInitText(prev => prev + \"\\n\");\r\n          i++;\r\n          displayNextMessage();\r\n        }, 0, 50);\r\n      } else {\r\n        const welcomeMessage =\r\n          \"\\nWelcome to The Traveller Terminal.\\n\" +\r\n          \"Type the name of a terminal to access its contents.\\n\\n\";\r\n        typeText(welcomeMessage, setInitText, () => {\r\n          setInitComplete(true);\r\n        }, 0, 50);\r\n      }\r\n    };\r\n    displayNextMessage();\r\n  }, []);\r\n\r\n  const handleAccessCode = () => {\r\n    // Check for our silly terminal first:\r\n    if (inputCode.trim().toLowerCase() === \"poop\") {\r\n      navigate(\"/poop\");\r\n      return;\r\n    }\r\n    \r\n    const terminal = terminals[inputCode];\r\n    if (terminal) {\r\n      setActiveTerminal(terminal);\r\n      setCurrentView(\"terminal\");\r\n      \r\n      // Check if the terminal requires a password\r\n      if (terminal.requiresPassword && !isPasswordUnlocked) {\r\n        setTerminalPasswordRequired(true);\r\n      } \r\n      else if (terminal.requiresRoll) {\r\n        setRollCheck({ difficulty: terminal.requiresRoll, success: null });\r\n      } else {\r\n        fetchLogs(terminal.logs);\r\n      }\r\n    } else {\r\n      typeText(\"ACCESS DENIED. INVALID CODE.\", setTerminalData);\r\n    }\r\n    setInputCode(\"\");\r\n  };\r\n\r\n  const handleTerminalPasswordSubmit = () => {\r\n    if (activeTerminal && terminalPasswordInput === activeTerminal.password) {\r\n      setTerminalPasswordRequired(false);\r\n      setIsPasswordUnlocked(true);\r\n      \r\n      if (activeTerminal.requiresRoll) {\r\n        setRollCheck({ difficulty: activeTerminal.requiresRoll, success: null });\r\n      } else {\r\n        fetchLogs(activeTerminal.logs);\r\n      }\r\n    } else {\r\n      setTerminalPasswordInput(\"\");\r\n      typeText(\"ACCESS DENIED. INVALID PASSWORD.\", setTerminalData);\r\n    }\r\n  };\r\n\r\n  const handleRollCheck = (passed) => {\r\n    if (passed) {\r\n      if (activeTerminal) {\r\n        fetchLogs(activeTerminal.logs);\r\n      } else {\r\n        typeText(\"ERROR: Terminal not found.\", setTerminalData);\r\n      }\r\n    } else {\r\n      typeText(\"ACCESS DENIED. INSUFFICIENT CLEARANCE.\", setTerminalData);\r\n    }\r\n    setRollCheck(null);\r\n  };\r\n\r\n  const handleSpecialRollCheck = (passed) => {\r\n    if (passed) {\r\n      if (selectedLogData) {\r\n        if (selectedLogData.logs) {\r\n          setAudioLogsData(selectedLogData.logs);\r\n          setShowAudioLogsPage(true);\r\n        } else {\r\n          setDisplayedText(\"\");\r\n          setLogTypingComplete(false);\r\n          setCurrentView(\"log\");\r\n          \r\n          let message = \"\";\r\n          if (selectedLogData.roll_check && selectedLogData.roll_check.on_success) {\r\n            message = selectedLogData.roll_check.on_success + \"\\n\\n\";\r\n            message += `Date: ${selectedLogData.date}\\nAuthor: ${selectedLogData.author}\\n\\n${selectedLogData.content}`;\r\n          } else {\r\n            message = `Date: ${selectedLogData.date}\\nAuthor: ${selectedLogData.author}\\n\\n${selectedLogData.content}`;\r\n          }\r\n          \r\n          // Store the typing function reference so we can cancel it with ESC key\r\n          const typeWithRef = (text, setState, callback = null, index = 0, delay = 30) => {\r\n            if (index < text.length) {\r\n              setState(prev => prev + text[index]);\r\n              typingRef.current = setTimeout(\r\n                () => typeWithRef(text, setState, callback, index + 1, delay), \r\n                delay\r\n              );\r\n            } else {\r\n              typingRef.current = null;\r\n              if (callback) callback();\r\n            }\r\n          };\r\n          \r\n          typeWithRef(message, setDisplayedText, () => {\r\n            setLogTypingComplete(true);\r\n          });\r\n        }\r\n      } else {\r\n        typeText(\"ERROR: Log not found.\", setTerminalData);\r\n      }\r\n    } else {\r\n      if (selectedLogData && selectedLogData.roll_check && selectedLogData.roll_check.on_failure) {\r\n        typeText(selectedLogData.roll_check.on_failure, setTerminalData);\r\n      } else {\r\n        typeText(\"ACCESS DENIED. INSUFFICIENT CLEARANCE.\", setTerminalData);\r\n      }\r\n      setSelectedLogData(null);\r\n    }\r\n    setSpecialRollCheck(null);\r\n    setPasswordAttempts(0);\r\n    setIsPasswordUnlocked(false);\r\n    setPasswordInput(\"\");\r\n  };\r\n\r\n  const fetchLogs = async (logPath) => {\r\n    try {\r\n      const response = await fetch(logPath);\r\n      const data = await response.json();\r\n      if (Array.isArray(data)) {\r\n        setLogData(data);\r\n      } else {\r\n        setSelectedLogData(data);\r\n        setCurrentView(\"log\");\r\n        setDisplayedText(\"\");\r\n        setLogTypingComplete(false);\r\n        \r\n        const message = `Date: ${data.date}\\nAuthor: ${data.author}\\n\\n${data.content || \"No data available.\"}`;\r\n        \r\n        // Store the typing function reference so we can cancel it with ESC key\r\n        const typeWithRef = (text, setState, callback = null, index = 0, delay = 30) => {\r\n          if (index < text.length) {\r\n            setState(prev => prev + text[index]);\r\n            typingRef.current = setTimeout(\r\n              () => typeWithRef(text, setState, callback, index + 1, delay), \r\n              delay\r\n            );\r\n          } else {\r\n            typingRef.current = null;\r\n            if (callback) callback();\r\n          }\r\n        };\r\n        \r\n        typeWithRef(message, setDisplayedText, () => {\r\n          setLogTypingComplete(true);\r\n        });\r\n      }\r\n    } catch (error) {\r\n      typeText(\"ERROR LOADING LOGS.\", setTerminalData);\r\n    }\r\n  };\r\n\r\n  const handleLogClick = (log) => {\r\n    setSelectedLogData(log);\r\n    setCurrentView(\"log\");\r\n    setExpandedGroup(null);\r\n    setPasswordAttempts(0);\r\n    setPasswordInput(\"\");\r\n    setIsPasswordUnlocked(false);\r\n    \r\n    if (log.logs) {\r\n      if (log.requires_password) {\r\n        setRequiresPassword(true);\r\n      } else {\r\n        setAudioLogsData(log.logs);\r\n        setShowAudioLogsPage(true);\r\n      }\r\n    } else if (log.requires_password) {\r\n      setRequiresPassword(true);\r\n    } else {\r\n      if (log.requires_roll && log.roll_check && log.roll_check.difficulty >= 10) {\r\n        setSpecialRollCheck({ difficulty: log.roll_check.difficulty });\r\n      } else {\r\n        setDisplayedText(\"\");\r\n        setLogTypingComplete(false);\r\n        \r\n        const message = `Date: ${log.date}\\nAuthor: ${log.author}\\n\\n${log.content}`;\r\n        \r\n        // Store the typing function reference so we can cancel it with ESC key\r\n        const typeWithRef = (text, setState, callback = null, index = 0, delay = 30) => {\r\n          if (index < text.length) {\r\n            setState(prev => prev + text[index]);\r\n            typingRef.current = setTimeout(\r\n              () => typeWithRef(text, setState, callback, index + 1, delay), \r\n              delay\r\n            );\r\n          } else {\r\n            typingRef.current = null;\r\n            if (callback) callback();\r\n          }\r\n        };\r\n        \r\n        typeWithRef(message, setDisplayedText, () => {\r\n          setLogTypingComplete(true);\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const handlePasswordSubmit = () => {\r\n    if (passwordInput === selectedLogData.password) {\r\n      setIsPasswordUnlocked(true);\r\n      setRequiresPassword(false);\r\n      if (selectedLogData.logs) {\r\n        setAudioLogsData(selectedLogData.logs);\r\n        setShowAudioLogsPage(true);\r\n      } else {\r\n        setDisplayedText(\"\");\r\n        setLogTypingComplete(false);\r\n        \r\n        const message = `Date: ${selectedLogData.date}\\nAuthor: ${selectedLogData.author}\\n\\n${selectedLogData.content}`;\r\n        \r\n        typeText(message, setDisplayedText, () => {\r\n          setLogTypingComplete(true);\r\n        });\r\n      }\r\n    } else {\r\n      const attempts = passwordAttempts + 1;\r\n      setPasswordAttempts(attempts);\r\n      if (attempts >= (selectedLogData.attemptsAllowed || 3)) {\r\n        setRequiresPassword(false);\r\n        setSpecialRollCheck({ difficulty: selectedLogData.roll_check.difficulty });\r\n      } else {\r\n        typeText(\"Incorrect password. Please try again.\", setTerminalData);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleBackToTerminal = () => {\r\n    setSelectedLogData(null);\r\n    setDisplayedText(\"\");\r\n    setLogTypingComplete(false);\r\n    setCurrentView(\"terminal\");\r\n    // Cancel any ongoing typing\r\n    if (typingRef.current) {\r\n      clearTimeout(typingRef.current);\r\n      typingRef.current = null;\r\n    }\r\n  };\r\n\r\n  const handleBackToInit = () => {\r\n    setLogData(null);\r\n    setActiveTerminal(null);\r\n    setTerminalData(\"\");\r\n    setCurrentView(\"init\");\r\n    setTerminalPasswordRequired(false);\r\n    setTerminalPasswordInput(\"\");\r\n    setIsPasswordUnlocked(false);\r\n  };\r\n\r\n  if (showAudioLogsPage) {\r\n    return (\r\n      <div className=\"flex flex-col items-center h-screen bg-black\">\r\n        <h1 className=\"text-green-400 font-mono text-xl my-4\">Encrypted Audio Logs</h1>\r\n        <div className=\"w-full max-w-md border-green-400 border-2 p-4 overflow-auto\">\r\n          {audioLogsData.map((log, index) => (\r\n            <div key={index} style={{ marginBottom: \"20px\" }}>\r\n              <h2 className=\"text-green-400 font-mono\">{log.title}</h2>\r\n              <p className=\"text-green-400 font-mono\" style={{ whiteSpace: \"pre-wrap\" }}>{log.content}</p>\r\n              {log.audio_file && (\r\n                <audio\r\n                  controls\r\n                  style={{\r\n                    backgroundColor: \"black\",\r\n                    border: \"1px solid #33ff33\",\r\n                    borderRadius: \"5px\",\r\n                    width: \"100%\",\r\n                    marginTop: \"10px\",\r\n                    color: \"#33ff33\"\r\n                  }}\r\n                >\r\n                  <source src={log.audio_file} type=\"audio/mp3\" />\r\n                  Your browser does not support the audio element.\r\n                </audio>\r\n              )}\r\n            </div>\r\n          ))}\r\n          <Button\r\n            className=\"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500 mt-4\"\r\n            onClick={() => {\r\n              setShowAudioLogsPage(false);\r\n              setAudioLogsData([]);\r\n              setSelectedLogData(null);\r\n              setCurrentView(\"terminal\");\r\n            }}\r\n          >\r\n            Back\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center h-screen bg-black\">\r\n      {currentView === \"init\" && (\r\n        <div\r\n          style={{\r\n            fontFamily: \"monospace\",\r\n            color: \"#33ff33\",\r\n            whiteSpace: \"pre-wrap\",\r\n            marginBottom: \"10px\",\r\n            textAlign: \"center\"\r\n          }}\r\n        >\r\n          {initText}\r\n        </div>\r\n      )}\r\n      <Card className=\"w-full max-w-md border-green-400 border-2\">\r\n        <CardContent>\r\n          <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 1 }}>\r\n            <div className=\"terminal overflow-auto h-[300px]\">\r\n              {terminalPasswordRequired ? (\r\n                <div>\r\n                  <p>\r\n                    Terminal requires password authentication.\r\n                  </p>\r\n                  <div className=\"mt-4\">\r\n                    <Input\r\n                      className=\"bg-black text-green-400 border border-green-400 px-3 py-2 font-mono focus:outline-none\"\r\n                      placeholder=\"Enter Password\"\r\n                      value={terminalPasswordInput}\r\n                      onChange={(e) => setTerminalPasswordInput(e.target.value)}\r\n                      type=\"password\"\r\n                    />\r\n                    <div className=\"flex gap-2 mt-2\">\r\n                      <Button\r\n                        className=\"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\"\r\n                        onClick={handleTerminalPasswordSubmit}\r\n                      >\r\n                        Submit\r\n                      </Button>\r\n                      <Button\r\n                        className=\"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\"\r\n                        onClick={handleBackToInit}\r\n                      >\r\n                        Back\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ) : specialRollCheck ? (\r\n                <div>\r\n                  <p>\r\n                    Did you pass the {specialRollCheck.difficulty}+ check for{\" \"}\r\n                    {selectedLogData ? selectedLogData.title : \"this file\"}?\r\n                  </p>\r\n                  <div className=\"flex gap-2\">\r\n                    <Button\r\n                      className=\"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\"\r\n                      onClick={() => handleSpecialRollCheck(true)}\r\n                    >\r\n                      Yes\r\n                    </Button>\r\n                    <Button\r\n                      className=\"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\"\r\n                      onClick={() => handleSpecialRollCheck(false)}\r\n                    >\r\n                      No\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              ) : rollCheck ? (\r\n                <div>\r\n                  <p>\r\n                    Did you pass the {rollCheck.difficulty}+ Electronics (Computers) check?\r\n                  </p>\r\n                  <div className=\"flex gap-2\">\r\n                    <Button\r\n                      className=\"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\"\r\n                      onClick={() => handleRollCheck(true)}\r\n                    >\r\n                      Yes\r\n                    </Button>\r\n                    <Button\r\n                      className=\"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\"\r\n                      onClick={() => handleRollCheck(false)}\r\n                    >\r\n                      No\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              ) : selectedLogData && requiresPassword && !isPasswordUnlocked ? (\r\n                <div>\r\n                  <p>\r\n                    Password required for {selectedLogData.title}. Attempts remaining:{\" \"}\r\n                    {(selectedLogData.attemptsAllowed || 3) - passwordAttempts}\r\n                  </p>\r\n                  <Input\r\n                    className=\"bg-black text-green-400 border border-green-400 px-3 py-2 font-mono focus:outline-none\"\r\n                    placeholder=\"Enter Password\"\r\n                    value={passwordInput}\r\n                    onChange={(e) => setPasswordInput(e.target.value)}\r\n                    type=\"password\"\r\n                  />\r\n                  <div className=\"flex gap-2 mt-2\">\r\n                    <Button\r\n                      className=\"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\"\r\n                      onClick={handlePasswordSubmit}\r\n                    >\r\n                      Submit\r\n                    </Button>\r\n                    <Button\r\n                      className=\"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\"\r\n                      onClick={handleBackToTerminal}\r\n                    >\r\n                      Back\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              ) : selectedLogData ? (\r\n                <div>\r\n                  <div style={{ whiteSpace: \"pre-wrap\" }}>{displayedText}</div>\r\n                  {selectedLogData.audio_file && (\r\n                    <audio\r\n                      controls\r\n                      style={{\r\n                        backgroundColor: \"black\",\r\n                        border: \"1px solid #33ff33\",\r\n                        borderRadius: \"5px\",\r\n                        width: \"100%\",\r\n                        marginTop: \"10px\",\r\n                        color: \"#33ff33\"\r\n                      }}\r\n                    >\r\n                      <source src={selectedLogData.audio_file} type=\"audio/mp3\" />\r\n                      Your browser does not support the audio element.\r\n                    </audio>\r\n                  )}\r\n                  {logTypingComplete && (\r\n                    <Button\r\n                      className=\"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500 mt-2\"\r\n                      onClick={handleBackToTerminal}\r\n                    >\r\n                      Back\r\n                    </Button>\r\n                  )}\r\n                </div>\r\n              ) : logData ? (\r\n                <div>\r\n                  {logData.map((log, index) => {\r\n                    if (log.logs) {\r\n                      return (\r\n                        <div key={index}>\r\n                          <p\r\n                            onClick={() => handleLogClick(log)}\r\n                            style={{ cursor: \"pointer\", textDecoration: \"underline\" }}\r\n                          >\r\n                            {log.title}\r\n                          </p>\r\n                        </div>\r\n                      );\r\n                    } else {\r\n                      return (\r\n                        <p\r\n                          key={index}\r\n                          onClick={() => handleLogClick(log)}\r\n                          style={{ cursor: \"pointer\", textDecoration: \"underline\" }}\r\n                        >\r\n                          {log.title}\r\n                        </p>\r\n                      );\r\n                    }\r\n                  })}\r\n                  <Button\r\n                    className=\"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500 mt-2\"\r\n                    onClick={handleBackToInit}\r\n                  >\r\n                    Back\r\n                  </Button>\r\n                </div>\r\n              ) : (\r\n                <p className=\"glitch-text\">\r\n                  {terminalData || \"ENTER ACCESS CODE TO PROCEED\"}\r\n                </p>\r\n              )}\r\n            </div>\r\n          </motion.div>\r\n          <div className=\"mt-4 flex gap-2\">\r\n            <Input\r\n              className=\"bg-black text-green-400 border border-green-400 px-3 py-2 font-mono focus:outline-none\"\r\n              placeholder=\"Enter Access Code...\"\r\n              value={inputCode}\r\n              onChange={(e) => setInputCode(e.target.value)}\r\n            />\r\n            <Button\r\n              className=\"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\"\r\n              onClick={handleAccessCode}\r\n            >\r\n              Enter\r\n            </Button>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}