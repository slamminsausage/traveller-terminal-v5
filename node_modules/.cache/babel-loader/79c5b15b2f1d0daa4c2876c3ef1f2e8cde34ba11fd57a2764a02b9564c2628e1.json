{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\James\\\\Desktop\\\\traveller-terminal-v5\\\\src\\\\components\\\\TravellerTerminal.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Card, CardContent } from \"../ui/Card\";\nimport { Input } from \"../ui/Input\";\nimport { Button } from \"../ui/Button\";\nimport { motion } from \"framer-motion\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst terminalStyle = {\n  fontFamily: \"monospace\",\n  color: \"#33ff33\",\n  backgroundColor: \"black\",\n  padding: \"20px\",\n  minHeight: \"400px\",\n  border: \"2px solid #33ff33\",\n  borderRadius: \"5px\",\n  boxShadow: \"0 0 10px #33ff33\"\n};\nconst terminalInputStyle = \"bg-black text-green-400 border border-green-400 px-3 py-2 font-mono focus:outline-none\";\nconst terminalButtonStyle = \"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\";\nexport default function TravellerTerminal() {\n  _s();\n  const [inputCode, setInputCode] = useState(\"\");\n  const [terminalData, setTerminalData] = useState(\"\");\n  const [logData, setLogData] = useState(null);\n  const [rollCheck, setRollCheck] = useState(null);\n  const [specialRollCheck, setSpecialRollCheck] = useState(null);\n  const [activeTerminal, setActiveTerminal] = useState(null);\n  const [selectedLogData, setSelectedLogData] = useState(null);\n  const [displayedText, setDisplayedText] = useState(\"\");\n  const [logTypingComplete, setLogTypingComplete] = useState(false);\n  const [terminals, setTerminals] = useState({});\n  const terminalContentRef = useRef(null);\n\n  // Fetch available terminals from the backend\n  useEffect(() => {\n    const fetchTerminals = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8080/api/terminals\");\n        const data = await response.json();\n        const formattedTerminals = {};\n        data.forEach(terminal => {\n          formattedTerminals[terminal.name] = {\n            requiresRoll: false,\n            logs: `http://localhost:8080/api/terminals/${terminal.id}/logs`\n          };\n        });\n        setTerminals(formattedTerminals);\n      } catch (error) {\n        console.error(\"Failed to fetch terminals:\", error);\n      }\n    };\n    fetchTerminals();\n  }, []);\n\n  // Scroll the terminal content container to the bottom on update\n  useEffect(() => {\n    if (terminalContentRef.current) {\n      terminalContentRef.current.scrollTop = terminalContentRef.current.scrollHeight;\n    }\n  }, [displayedText]);\n\n  // Typing effect function\n  const typeText = (text, setState, callback = null, index = 0) => {\n    if (index < text.length) {\n      setState(prev => prev + text[index]);\n      setTimeout(() => typeText(text, setState, callback, index + 1), 30);\n    } else {\n      if (callback) callback();\n    }\n  };\n  const handleAccessCode = () => {\n    const terminal = terminals[inputCode];\n    if (terminal) {\n      setActiveTerminal(terminal);\n      if (terminal.requiresRoll) {\n        setRollCheck({\n          difficulty: terminal.requiresRoll,\n          success: null\n        });\n      } else {\n        fetchLogs(terminal.logs);\n      }\n    } else {\n      typeText(\"ACCESS DENIED. INVALID CODE.\", setTerminalData);\n    }\n    setInputCode(\"\");\n  };\n  const handleRollCheck = passed => {\n    if (passed) {\n      if (activeTerminal) {\n        fetchLogs(activeTerminal.logs);\n      } else {\n        typeText(\"ERROR: Terminal not found.\", setTerminalData);\n      }\n    } else {\n      typeText(\"ACCESS DENIED. INSUFFICIENT CLEARANCE.\", setTerminalData);\n    }\n    setRollCheck(null);\n  };\n  const handleSpecialRollCheck = passed => {\n    if (passed) {\n      if (selectedLogData) {\n        var _selectedLogData$roll;\n        setDisplayedText(\"\");\n        setLogTypingComplete(false);\n        if ((_selectedLogData$roll = selectedLogData.roll_check) !== null && _selectedLogData$roll !== void 0 && _selectedLogData$roll.on_success) {\n          typeText(selectedLogData.roll_check.on_success, setDisplayedText, () => {\n            setLogTypingComplete(true);\n          });\n        } else {\n          typeText(selectedLogData.content, setDisplayedText, () => {\n            setLogTypingComplete(true);\n          });\n        }\n      } else {\n        typeText(\"ERROR: Log not found.\", setTerminalData);\n      }\n    } else {\n      var _selectedLogData$roll2;\n      typeText((selectedLogData === null || selectedLogData === void 0 ? void 0 : (_selectedLogData$roll2 = selectedLogData.roll_check) === null || _selectedLogData$roll2 === void 0 ? void 0 : _selectedLogData$roll2.on_failure) || \"ACCESS DENIED. INSUFFICIENT CLEARANCE.\", setTerminalData);\n    }\n    setSpecialRollCheck(null);\n  };\n  const fetchLogs = async logUrl => {\n    try {\n      const response = await fetch(logUrl);\n      const data = await response.json();\n      if (Array.isArray(data)) {\n        setLogData(data);\n      } else {\n        setSelectedLogData(data);\n        setDisplayedText(\"\");\n        setLogTypingComplete(false);\n        typeText(data.content || \"No data available.\", setDisplayedText, () => {\n          setLogTypingComplete(true);\n        });\n      }\n    } catch (error) {\n      typeText(\"ERROR LOADING LOGS FROM SERVER.\", setTerminalData);\n    }\n  };\n  const handleLogClick = log => {\n    if (log.title === \"Erased Transmission\" || log.title === \"Internal Memo - Urgent Subject Transfer\") {\n      setSelectedLogData(log);\n      setSpecialRollCheck({\n        difficulty: log.roll_check.difficulty\n      });\n    } else {\n      setSelectedLogData(log);\n      setDisplayedText(\"\");\n      setLogTypingComplete(false);\n      typeText(log.content, setDisplayedText, () => {\n        setLogTypingComplete(true);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center items-center h-screen bg-black\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"w-[600px] border-green-400 border-2\",\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(motion.div, {\n          initial: {\n            opacity: 0\n          },\n          animate: {\n            opacity: 1\n          },\n          transition: {\n            duration: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: terminalContentRef,\n            style: terminalStyle,\n            className: \"overflow-auto h-[300px] terminal\",\n            children: specialRollCheck ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Did you pass the \", specialRollCheck.difficulty, \"+ check for \", selectedLogData === null || selectedLogData === void 0 ? void 0 : selectedLogData.title, \"?\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex gap-2\",\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  className: terminalButtonStyle,\n                  onClick: () => handleSpecialRollCheck(true),\n                  children: \"Yes\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  className: terminalButtonStyle,\n                  onClick: () => handleSpecialRollCheck(false),\n                  children: \"No\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 173,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 17\n            }, this) : rollCheck ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Did you pass the \", rollCheck.difficulty, \"+ Electronics (Computers) check?\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex gap-2\",\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  className: terminalButtonStyle,\n                  onClick: () => handleRollCheck(true),\n                  children: \"Yes\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 180,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  className: terminalButtonStyle,\n                  onClick: () => handleRollCheck(false),\n                  children: \"No\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 181,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 17\n            }, this) : selectedLogData ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  whiteSpace: \"pre-wrap\"\n                },\n                children: displayedText\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 19\n              }, this), logTypingComplete && /*#__PURE__*/_jsxDEV(Button, {\n                className: terminalButtonStyle,\n                onClick: () => setSelectedLogData(null),\n                children: \"Back\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 17\n            }, this) : logData ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: logData.map((log, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n                onClick: () => handleLogClick(log),\n                style: {\n                  cursor: \"pointer\",\n                  textDecoration: \"underline\"\n                },\n                children: log.title\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: terminalData\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          value: inputCode,\n          onChange: e => setInputCode(e.target.value),\n          className: terminalInputStyle,\n          placeholder: \"Enter Access Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: terminalButtonStyle,\n          onClick: handleAccessCode,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n}\n_s(TravellerTerminal, \"vmtjgdSIt7Fbj8Zz1snbpLEPaaA=\");\n_c = TravellerTerminal;\nvar _c;\n$RefreshReg$(_c, \"TravellerTerminal\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Card","CardContent","Input","Button","motion","jsxDEV","_jsxDEV","terminalStyle","fontFamily","color","backgroundColor","padding","minHeight","border","borderRadius","boxShadow","terminalInputStyle","terminalButtonStyle","TravellerTerminal","_s","inputCode","setInputCode","terminalData","setTerminalData","logData","setLogData","rollCheck","setRollCheck","specialRollCheck","setSpecialRollCheck","activeTerminal","setActiveTerminal","selectedLogData","setSelectedLogData","displayedText","setDisplayedText","logTypingComplete","setLogTypingComplete","terminals","setTerminals","terminalContentRef","fetchTerminals","response","fetch","data","json","formattedTerminals","forEach","terminal","name","requiresRoll","logs","id","error","console","current","scrollTop","scrollHeight","typeText","text","setState","callback","index","length","prev","setTimeout","handleAccessCode","difficulty","success","fetchLogs","handleRollCheck","passed","handleSpecialRollCheck","_selectedLogData$roll","roll_check","on_success","content","_selectedLogData$roll2","on_failure","logUrl","Array","isArray","handleLogClick","log","title","className","children","div","initial","opacity","animate","transition","duration","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","onClick","whiteSpace","map","cursor","textDecoration","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/James/Desktop/traveller-terminal-v5/src/components/TravellerTerminal.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Card, CardContent } from \"../ui/Card\";\r\nimport { Input } from \"../ui/Input\";\r\nimport { Button } from \"../ui/Button\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst terminalStyle = {\r\n  fontFamily: \"monospace\",\r\n  color: \"#33ff33\",\r\n  backgroundColor: \"black\",\r\n  padding: \"20px\",\r\n  minHeight: \"400px\",\r\n  border: \"2px solid #33ff33\",\r\n  borderRadius: \"5px\",\r\n  boxShadow: \"0 0 10px #33ff33\"\r\n};\r\n\r\nconst terminalInputStyle =\r\n  \"bg-black text-green-400 border border-green-400 px-3 py-2 font-mono focus:outline-none\";\r\nconst terminalButtonStyle =\r\n  \"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\";\r\n\r\nexport default function TravellerTerminal() {\r\n  const [inputCode, setInputCode] = useState(\"\");\r\n  const [terminalData, setTerminalData] = useState(\"\");\r\n  const [logData, setLogData] = useState(null);\r\n  const [rollCheck, setRollCheck] = useState(null);\r\n  const [specialRollCheck, setSpecialRollCheck] = useState(null);\r\n  const [activeTerminal, setActiveTerminal] = useState(null);\r\n  const [selectedLogData, setSelectedLogData] = useState(null);\r\n  const [displayedText, setDisplayedText] = useState(\"\");\r\n  const [logTypingComplete, setLogTypingComplete] = useState(false);\r\n  const [terminals, setTerminals] = useState({});\r\n\r\n  const terminalContentRef = useRef(null);\r\n\r\n  // Fetch available terminals from the backend\r\n  useEffect(() => {\r\n    const fetchTerminals = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:8080/api/terminals\");\r\n        const data = await response.json();\r\n\r\n        const formattedTerminals = {};\r\n        data.forEach((terminal) => {\r\n          formattedTerminals[terminal.name] = {\r\n            requiresRoll: false,\r\n            logs: `http://localhost:8080/api/terminals/${terminal.id}/logs`\r\n          };\r\n        });\r\n\r\n        setTerminals(formattedTerminals);\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch terminals:\", error);\r\n      }\r\n    };\r\n\r\n    fetchTerminals();\r\n  }, []);\r\n\r\n  // Scroll the terminal content container to the bottom on update\r\n  useEffect(() => {\r\n    if (terminalContentRef.current) {\r\n      terminalContentRef.current.scrollTop = terminalContentRef.current.scrollHeight;\r\n    }\r\n  }, [displayedText]);\r\n\r\n  // Typing effect function\r\n  const typeText = (text, setState, callback = null, index = 0) => {\r\n    if (index < text.length) {\r\n      setState((prev) => prev + text[index]);\r\n      setTimeout(() => typeText(text, setState, callback, index + 1), 30);\r\n    } else {\r\n      if (callback) callback();\r\n    }\r\n  };\r\n\r\n  const handleAccessCode = () => {\r\n    const terminal = terminals[inputCode];\r\n    if (terminal) {\r\n      setActiveTerminal(terminal);\r\n      if (terminal.requiresRoll) {\r\n        setRollCheck({ difficulty: terminal.requiresRoll, success: null });\r\n      } else {\r\n        fetchLogs(terminal.logs);\r\n      }\r\n    } else {\r\n      typeText(\"ACCESS DENIED. INVALID CODE.\", setTerminalData);\r\n    }\r\n    setInputCode(\"\");\r\n  };\r\n\r\n  const handleRollCheck = (passed) => {\r\n    if (passed) {\r\n      if (activeTerminal) {\r\n        fetchLogs(activeTerminal.logs);\r\n      } else {\r\n        typeText(\"ERROR: Terminal not found.\", setTerminalData);\r\n      }\r\n    } else {\r\n      typeText(\"ACCESS DENIED. INSUFFICIENT CLEARANCE.\", setTerminalData);\r\n    }\r\n    setRollCheck(null);\r\n  };\r\n\r\n  const handleSpecialRollCheck = (passed) => {\r\n    if (passed) {\r\n      if (selectedLogData) {\r\n        setDisplayedText(\"\");\r\n        setLogTypingComplete(false);\r\n        if (selectedLogData.roll_check?.on_success) {\r\n          typeText(selectedLogData.roll_check.on_success, setDisplayedText, () => {\r\n            setLogTypingComplete(true);\r\n          });\r\n        } else {\r\n          typeText(selectedLogData.content, setDisplayedText, () => {\r\n            setLogTypingComplete(true);\r\n          });\r\n        }\r\n      } else {\r\n        typeText(\"ERROR: Log not found.\", setTerminalData);\r\n      }\r\n    } else {\r\n      typeText(selectedLogData?.roll_check?.on_failure || \"ACCESS DENIED. INSUFFICIENT CLEARANCE.\", setTerminalData);\r\n    }\r\n    setSpecialRollCheck(null);\r\n  };\r\n\r\n  const fetchLogs = async (logUrl) => {\r\n    try {\r\n      const response = await fetch(logUrl);\r\n      const data = await response.json();\r\n      if (Array.isArray(data)) {\r\n        setLogData(data);\r\n      } else {\r\n        setSelectedLogData(data);\r\n        setDisplayedText(\"\");\r\n        setLogTypingComplete(false);\r\n        typeText(data.content || \"No data available.\", setDisplayedText, () => {\r\n          setLogTypingComplete(true);\r\n        });\r\n      }\r\n    } catch (error) {\r\n      typeText(\"ERROR LOADING LOGS FROM SERVER.\", setTerminalData);\r\n    }\r\n  };\r\n\r\n  const handleLogClick = (log) => {\r\n    if (log.title === \"Erased Transmission\" || log.title === \"Internal Memo - Urgent Subject Transfer\") {\r\n      setSelectedLogData(log);\r\n      setSpecialRollCheck({ difficulty: log.roll_check.difficulty });\r\n    } else {\r\n      setSelectedLogData(log);\r\n      setDisplayedText(\"\");\r\n      setLogTypingComplete(false);\r\n      typeText(log.content, setDisplayedText, () => {\r\n        setLogTypingComplete(true);\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex justify-center items-center h-screen bg-black\">\r\n      <Card className=\"w-[600px] border-green-400 border-2\">\r\n        <CardContent>\r\n          <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 1 }}>\r\n            <div ref={terminalContentRef} style={terminalStyle} className=\"overflow-auto h-[300px] terminal\">\r\n              {specialRollCheck ? (\r\n                <div>\r\n                  <p>Did you pass the {specialRollCheck.difficulty}+ check for {selectedLogData?.title}?</p>\r\n                  <div className=\"flex gap-2\">\r\n                    <Button className={terminalButtonStyle} onClick={() => handleSpecialRollCheck(true)}>Yes</Button>\r\n                    <Button className={terminalButtonStyle} onClick={() => handleSpecialRollCheck(false)}>No</Button>\r\n                  </div>\r\n                </div>\r\n              ) : rollCheck ? (\r\n                <div>\r\n                  <p>Did you pass the {rollCheck.difficulty}+ Electronics (Computers) check?</p>\r\n                  <div className=\"flex gap-2\">\r\n                    <Button className={terminalButtonStyle} onClick={() => handleRollCheck(true)}>Yes</Button>\r\n                    <Button className={terminalButtonStyle} onClick={() => handleRollCheck(false)}>No</Button>\r\n                  </div>\r\n                </div>\r\n              ) : selectedLogData ? (\r\n                <div>\r\n                  <div style={{ whiteSpace: \"pre-wrap\" }}>{displayedText}</div>\r\n                  {logTypingComplete && (\r\n                    <Button className={terminalButtonStyle} onClick={() => setSelectedLogData(null)}>Back</Button>\r\n                  )}\r\n                </div>\r\n              ) : logData ? (\r\n                <div>\r\n                  {logData.map((log, index) => (\r\n                    <p key={index} onClick={() => handleLogClick(log)} style={{ cursor: \"pointer\", textDecoration: \"underline\" }}>\r\n                      {log.title}\r\n                    </p>\r\n                  ))}\r\n                </div>\r\n              ) : (\r\n                <p>{terminalData}</p>\r\n              )}\r\n            </div>\r\n          </motion.div>\r\n          <Input value={inputCode} onChange={(e) => setInputCode(e.target.value)} className={terminalInputStyle} placeholder=\"Enter Access Code\" />\r\n          <Button className={terminalButtonStyle} onClick={handleAccessCode}>Submit</Button>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}