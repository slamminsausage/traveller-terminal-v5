{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\James\\\\Desktop\\\\traveller-terminal-v5\\\\src\\\\components\\\\TravellerTerminal.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Card, CardContent } from \"../ui/Card\";\nimport { Input } from \"../ui/Input\";\nimport { Button } from \"../ui/Button\";\nimport { motion } from \"framer-motion\";\n\n// Terminal definitions including labpc81\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst terminals = {\n  \"lysani01\": {\n    requiresRoll: 8,\n    logs: \"/logs/lysani01.json\"\n  },\n  \"s.elara01\": {\n    requiresRoll: false,\n    logs: \"/logs/s.elara01.json\"\n  },\n  \"slocombe875\": {\n    requiresRoll: 8,\n    logs: \"/logs/slocombe875.json\"\n  },\n  \"waferterm01\": {\n    requiresRoll: false,\n    logs: \"/logs/waferterm01.json\"\n  },\n  \"labpc81\": {\n    requiresRoll: 6,\n    logs: \"/logs/labpc81.json\"\n  }\n};\n\n// Generic typing function with adjustable delay\nconst typeText = (text, setState, callback = null, index = 0, delay = 30) => {\n  if (index < text.length) {\n    setState(prev => prev + text[index]);\n    setTimeout(() => typeText(text, setState, callback, index + 1, delay), delay);\n  } else {\n    if (callback) callback();\n  }\n};\nexport default function TravellerTerminal() {\n  _s();\n  // Initialization states\n  const [initText, setInitText] = useState(\"\");\n  const [initComplete, setInitComplete] = useState(false);\n  const hasInitialized = useRef(false);\n\n  // Terminal and log states\n  const [inputCode, setInputCode] = useState(\"\");\n  const [terminalData, setTerminalData] = useState(\"\");\n  const [logData, setLogData] = useState(null);\n  const [rollCheck, setRollCheck] = useState(null);\n  const [specialRollCheck, setSpecialRollCheck] = useState(null);\n  const [activeTerminal, setActiveTerminal] = useState(null);\n  const [selectedLogData, setSelectedLogData] = useState(null);\n  const [displayedText, setDisplayedText] = useState(\"\");\n  const [logTypingComplete, setLogTypingComplete] = useState(false);\n\n  // Initialization effect: ensure it runs only once\n  useEffect(() => {\n    if (hasInitialized.current) return;\n    hasInitialized.current = true;\n    const loadingMessages = [\"Initializing system...\", \"Connecting to network...\", \"Loading secure protocols...\", \"The Traveller Terminal is now online.\"];\n    let i = 0;\n    const displayNextMessage = () => {\n      if (i < loadingMessages.length) {\n        typeText(loadingMessages[i] + \"\\n\", setInitText, () => {\n          // Add an extra newline for readability\n          setInitText(prev => prev + \"\\n\");\n          i++;\n          displayNextMessage();\n        }, 0, 50);\n      } else {\n        const welcomeMessage = \"\\nWelcome to The Traveller Terminal.\\n\" + \"Type the name of a terminal to access its contents.\\n\\n\";\n        typeText(welcomeMessage, setInitText, () => {\n          setInitComplete(true);\n        }, 0, 50);\n      }\n    };\n    displayNextMessage();\n  }, []);\n\n  // Access code handler for selecting a terminal\n  const handleAccessCode = () => {\n    const terminal = terminals[inputCode];\n    if (terminal) {\n      setActiveTerminal(terminal);\n      if (terminal.requiresRoll) {\n        setRollCheck({\n          difficulty: terminal.requiresRoll,\n          success: null\n        });\n      } else {\n        fetchLogs(terminal.logs);\n      }\n    } else {\n      typeText(\"ACCESS DENIED. INVALID CODE.\", setTerminalData);\n    }\n    setInputCode(\"\");\n  };\n\n  // Roll check for the terminal itself\n  const handleRollCheck = passed => {\n    if (passed) {\n      if (activeTerminal) {\n        fetchLogs(activeTerminal.logs);\n      } else {\n        typeText(\"ERROR: Terminal not found.\", setTerminalData);\n      }\n    } else {\n      typeText(\"ACCESS DENIED. INSUFFICIENT CLEARANCE.\", setTerminalData);\n    }\n    setRollCheck(null);\n  };\n  const handleSpecialRollCheck = passed => {\n    if (passed) {\n      if (selectedLogData) {\n        setDisplayedText(\"\");\n        setLogTypingComplete(false);\n        // If there's an on_success message, display the content first and then the on_success message.\n        let message = \"\";\n        if (selectedLogData.roll_check && selectedLogData.roll_check.on_success) {\n          message = selectedLogData.content + \"\\n\\n\" + selectedLogData.roll_check.on_success;\n        } else {\n          message = selectedLogData.content;\n        }\n        typeText(message, setDisplayedText, () => {\n          setLogTypingComplete(true);\n        });\n      } else {\n        typeText(\"ERROR: Log not found.\", setTerminalData);\n      }\n    } else {\n      if (selectedLogData && selectedLogData.roll_check && selectedLogData.roll_check.on_failure) {\n        typeText(selectedLogData.roll_check.on_failure, setTerminalData);\n      } else {\n        typeText(\"ACCESS DENIED. INSUFFICIENT CLEARANCE.\", setTerminalData);\n      }\n      setSelectedLogData(null);\n    }\n    setSpecialRollCheck(null);\n  };\n\n  // Fetch logs from the provided path\n  const fetchLogs = async logPath => {\n    try {\n      const response = await fetch(logPath);\n      const data = await response.json();\n      if (Array.isArray(data)) {\n        setLogData(data);\n      } else {\n        setSelectedLogData(data);\n        setDisplayedText(\"\");\n        setLogTypingComplete(false);\n        typeText(data.content || \"No data available.\", setDisplayedText, () => {\n          setLogTypingComplete(true);\n        });\n      }\n    } catch (error) {\n      typeText(\"ERROR LOADING LOGS.\", setTerminalData);\n    }\n  };\n\n  // Handler for when a log is clicked\n  const handleLogClick = log => {\n    setSelectedLogData(log);\n    // Only prompt for a roll check if this is the Internal Memo (requires a 10+ check)\n    if (log.requires_roll && log.roll_check && log.roll_check.difficulty === 10) {\n      setSpecialRollCheck({\n        difficulty: log.roll_check.difficulty\n      });\n    } else {\n      // For logs that require a 6+ check or no roll check, immediately display the content.\n      setDisplayedText(\"\");\n      setLogTypingComplete(false);\n      typeText(log.content, setDisplayedText, () => {\n        setLogTypingComplete(true);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center h-screen bg-black\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontFamily: \"monospace\",\n        color: \"#33ff33\",\n        whiteSpace: \"pre-wrap\",\n        marginBottom: \"10px\",\n        textAlign: \"center\"\n      },\n      children: initText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      className: \"w-[600px] border-green-400 border-2\",\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(motion.div, {\n          initial: {\n            opacity: 0\n          },\n          animate: {\n            opacity: 1\n          },\n          transition: {\n            duration: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"terminal overflow-auto h-[300px]\",\n            children: specialRollCheck ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Did you pass the \", specialRollCheck.difficulty, \"+ check for\", \" \", selectedLogData ? selectedLogData.title : \"this file\", \"?\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex gap-2\",\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  className: \"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\",\n                  onClick: () => handleSpecialRollCheck(true),\n                  children: \"Yes\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 196,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  className: \"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\",\n                  onClick: () => handleSpecialRollCheck(false),\n                  children: \"No\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 17\n            }, this) : rollCheck ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Did you pass the \", rollCheck.difficulty, \"+ Electronics (Computers) check?\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex gap-2\",\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  className: \"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\",\n                  onClick: () => handleRollCheck(true),\n                  children: \"Yes\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 216,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  className: \"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\",\n                  onClick: () => handleRollCheck(false),\n                  children: \"No\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 222,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 17\n            }, this) : selectedLogData ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  whiteSpace: \"pre-wrap\"\n                },\n                children: displayedText\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 19\n              }, this), selectedLogData.audio_file && /*#__PURE__*/_jsxDEV(\"audio\", {\n                controls: true,\n                style: {\n                  backgroundColor: \"black\",\n                  border: \"1px solid #33ff33\",\n                  borderRadius: \"5px\",\n                  width: \"100%\",\n                  marginTop: \"10px\",\n                  color: \"#33ff33\"\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"source\", {\n                  src: selectedLogData.audio_file,\n                  type: \"audio/mp3\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 245,\n                  columnNumber: 23\n                }, this), \"Your browser does not support the audio element.\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 21\n              }, this), logTypingComplete && /*#__PURE__*/_jsxDEV(Button, {\n                className: \"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500 mt-2\",\n                onClick: () => {\n                  setSelectedLogData(null);\n                  setDisplayedText(\"\");\n                  setLogTypingComplete(false);\n                },\n                children: \"Back\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 17\n            }, this) : logData ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: logData.map((log, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n                onClick: () => handleLogClick(log),\n                style: {\n                  cursor: \"pointer\",\n                  textDecoration: \"underline\"\n                },\n                children: log.title\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"glitch-text\",\n              children: terminalData || \"ENTER ACCESS CODE TO PROCEED\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4 flex gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            className: \"bg-black text-green-400 border border-green-400 px-3 py-2 font-mono focus:outline-none\",\n            placeholder: \"Enter Access Code...\",\n            value: inputCode,\n            onChange: e => setInputCode(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            className: \"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\",\n            onClick: handleAccessCode,\n            children: \"Enter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n}\n_s(TravellerTerminal, \"xAvw8vI8PuguEK6rakFGb4wfmKA=\");\n_c = TravellerTerminal;\nvar _c;\n$RefreshReg$(_c, \"TravellerTerminal\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Card","CardContent","Input","Button","motion","jsxDEV","_jsxDEV","terminals","requiresRoll","logs","typeText","text","setState","callback","index","delay","length","prev","setTimeout","TravellerTerminal","_s","initText","setInitText","initComplete","setInitComplete","hasInitialized","inputCode","setInputCode","terminalData","setTerminalData","logData","setLogData","rollCheck","setRollCheck","specialRollCheck","setSpecialRollCheck","activeTerminal","setActiveTerminal","selectedLogData","setSelectedLogData","displayedText","setDisplayedText","logTypingComplete","setLogTypingComplete","current","loadingMessages","i","displayNextMessage","welcomeMessage","handleAccessCode","terminal","difficulty","success","fetchLogs","handleRollCheck","passed","handleSpecialRollCheck","message","roll_check","on_success","content","on_failure","logPath","response","fetch","data","json","Array","isArray","error","handleLogClick","log","requires_roll","className","children","style","fontFamily","color","whiteSpace","marginBottom","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","div","initial","opacity","animate","transition","duration","title","onClick","audio_file","controls","backgroundColor","border","borderRadius","width","marginTop","src","type","map","cursor","textDecoration","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/James/Desktop/traveller-terminal-v5/src/components/TravellerTerminal.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Card, CardContent } from \"../ui/Card\";\r\nimport { Input } from \"../ui/Input\";\r\nimport { Button } from \"../ui/Button\";\r\nimport { motion } from \"framer-motion\";\r\n\r\n// Terminal definitions including labpc81\r\nconst terminals = {\r\n  \"lysani01\": { requiresRoll: 8, logs: \"/logs/lysani01.json\" },\r\n  \"s.elara01\": { requiresRoll: false, logs: \"/logs/s.elara01.json\" },\r\n  \"slocombe875\": { requiresRoll: 8, logs: \"/logs/slocombe875.json\" },\r\n  \"waferterm01\": { requiresRoll: false, logs: \"/logs/waferterm01.json\" },\r\n  \"labpc81\": { requiresRoll: 6, logs: \"/logs/labpc81.json\" }\r\n};\r\n\r\n// Generic typing function with adjustable delay\r\nconst typeText = (text, setState, callback = null, index = 0, delay = 30) => {\r\n  if (index < text.length) {\r\n    setState((prev) => prev + text[index]);\r\n    setTimeout(() => typeText(text, setState, callback, index + 1, delay), delay);\r\n  } else {\r\n    if (callback) callback();\r\n  }\r\n};\r\n\r\nexport default function TravellerTerminal() {\r\n  // Initialization states\r\n  const [initText, setInitText] = useState(\"\");\r\n  const [initComplete, setInitComplete] = useState(false);\r\n  const hasInitialized = useRef(false);\r\n\r\n  // Terminal and log states\r\n  const [inputCode, setInputCode] = useState(\"\");\r\n  const [terminalData, setTerminalData] = useState(\"\");\r\n  const [logData, setLogData] = useState(null);\r\n  const [rollCheck, setRollCheck] = useState(null);\r\n  const [specialRollCheck, setSpecialRollCheck] = useState(null);\r\n  const [activeTerminal, setActiveTerminal] = useState(null);\r\n  const [selectedLogData, setSelectedLogData] = useState(null);\r\n  const [displayedText, setDisplayedText] = useState(\"\");\r\n  const [logTypingComplete, setLogTypingComplete] = useState(false);\r\n\r\n  // Initialization effect: ensure it runs only once\r\n  useEffect(() => {\r\n    if (hasInitialized.current) return;\r\n    hasInitialized.current = true;\r\n\r\n    const loadingMessages = [\r\n      \"Initializing system...\",\r\n      \"Connecting to network...\",\r\n      \"Loading secure protocols...\",\r\n      \"The Traveller Terminal is now online.\"\r\n    ];\r\n    let i = 0;\r\n    const displayNextMessage = () => {\r\n      if (i < loadingMessages.length) {\r\n        typeText(loadingMessages[i] + \"\\n\", setInitText, () => {\r\n          // Add an extra newline for readability\r\n          setInitText((prev) => prev + \"\\n\");\r\n          i++;\r\n          displayNextMessage();\r\n        }, 0, 50);\r\n      } else {\r\n        const welcomeMessage =\r\n          \"\\nWelcome to The Traveller Terminal.\\n\" +\r\n          \"Type the name of a terminal to access its contents.\\n\\n\";\r\n        typeText(welcomeMessage, setInitText, () => {\r\n          setInitComplete(true);\r\n        }, 0, 50);\r\n      }\r\n    };\r\n    displayNextMessage();\r\n  }, []);\r\n\r\n  // Access code handler for selecting a terminal\r\n  const handleAccessCode = () => {\r\n    const terminal = terminals[inputCode];\r\n    if (terminal) {\r\n      setActiveTerminal(terminal);\r\n      if (terminal.requiresRoll) {\r\n        setRollCheck({ difficulty: terminal.requiresRoll, success: null });\r\n      } else {\r\n        fetchLogs(terminal.logs);\r\n      }\r\n    } else {\r\n      typeText(\"ACCESS DENIED. INVALID CODE.\", setTerminalData);\r\n    }\r\n    setInputCode(\"\");\r\n  };\r\n\r\n  // Roll check for the terminal itself\r\n  const handleRollCheck = (passed) => {\r\n    if (passed) {\r\n      if (activeTerminal) {\r\n        fetchLogs(activeTerminal.logs);\r\n      } else {\r\n        typeText(\"ERROR: Terminal not found.\", setTerminalData);\r\n      }\r\n    } else {\r\n      typeText(\"ACCESS DENIED. INSUFFICIENT CLEARANCE.\", setTerminalData);\r\n    }\r\n    setRollCheck(null);\r\n  };\r\n\r\n  const handleSpecialRollCheck = (passed) => {\r\n    if (passed) {\r\n      if (selectedLogData) {\r\n        setDisplayedText(\"\");\r\n        setLogTypingComplete(false);\r\n        // If there's an on_success message, display the content first and then the on_success message.\r\n        let message = \"\";\r\n        if (selectedLogData.roll_check && selectedLogData.roll_check.on_success) {\r\n          message = selectedLogData.content + \"\\n\\n\" + selectedLogData.roll_check.on_success;\r\n        } else {\r\n          message = selectedLogData.content;\r\n        }\r\n        typeText(message, setDisplayedText, () => {\r\n          setLogTypingComplete(true);\r\n        });\r\n      } else {\r\n        typeText(\"ERROR: Log not found.\", setTerminalData);\r\n      }\r\n    } else {\r\n      if (selectedLogData && selectedLogData.roll_check && selectedLogData.roll_check.on_failure) {\r\n        typeText(selectedLogData.roll_check.on_failure, setTerminalData);\r\n      } else {\r\n        typeText(\"ACCESS DENIED. INSUFFICIENT CLEARANCE.\", setTerminalData);\r\n      }\r\n      setSelectedLogData(null);\r\n    }\r\n    setSpecialRollCheck(null);\r\n  };\r\n\r\n  // Fetch logs from the provided path\r\n  const fetchLogs = async (logPath) => {\r\n    try {\r\n      const response = await fetch(logPath);\r\n      const data = await response.json();\r\n      if (Array.isArray(data)) {\r\n        setLogData(data);\r\n      } else {\r\n        setSelectedLogData(data);\r\n        setDisplayedText(\"\");\r\n        setLogTypingComplete(false);\r\n        typeText(data.content || \"No data available.\", setDisplayedText, () => {\r\n          setLogTypingComplete(true);\r\n        });\r\n      }\r\n    } catch (error) {\r\n      typeText(\"ERROR LOADING LOGS.\", setTerminalData);\r\n    }\r\n  };\r\n\r\n  // Handler for when a log is clicked\r\n  const handleLogClick = (log) => {\r\n    setSelectedLogData(log);\r\n    // Only prompt for a roll check if this is the Internal Memo (requires a 10+ check)\r\n    if (log.requires_roll && log.roll_check && log.roll_check.difficulty === 10) {\r\n      setSpecialRollCheck({ difficulty: log.roll_check.difficulty });\r\n    } else {\r\n      // For logs that require a 6+ check or no roll check, immediately display the content.\r\n      setDisplayedText(\"\");\r\n      setLogTypingComplete(false);\r\n      typeText(log.content, setDisplayedText, () => {\r\n        setLogTypingComplete(true);\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center h-screen bg-black\">\r\n      {/* Initialization message area above the terminal */}\r\n      <div\r\n        style={{\r\n          fontFamily: \"monospace\",\r\n          color: \"#33ff33\",\r\n          whiteSpace: \"pre-wrap\",\r\n          marginBottom: \"10px\",\r\n          textAlign: \"center\"\r\n        }}\r\n      >\r\n        {initText}\r\n      </div>\r\n\r\n      <Card className=\"w-[600px] border-green-400 border-2\">\r\n        <CardContent>\r\n          <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 1 }}>\r\n            <div className=\"terminal overflow-auto h-[300px]\">\r\n              {specialRollCheck ? (\r\n                <div>\r\n                  <p>\r\n                    Did you pass the {specialRollCheck.difficulty}+ check for{\" \"}\r\n                    {selectedLogData ? selectedLogData.title : \"this file\"}?\r\n                  </p>\r\n                  <div className=\"flex gap-2\">\r\n                    <Button\r\n                      className=\"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\"\r\n                      onClick={() => handleSpecialRollCheck(true)}\r\n                    >\r\n                      Yes\r\n                    </Button>\r\n                    <Button\r\n                      className=\"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\"\r\n                      onClick={() => handleSpecialRollCheck(false)}\r\n                    >\r\n                      No\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              ) : rollCheck ? (\r\n                <div>\r\n                  <p>\r\n                    Did you pass the {rollCheck.difficulty}+ Electronics (Computers) check?\r\n                  </p>\r\n                  <div className=\"flex gap-2\">\r\n                    <Button\r\n                      className=\"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\"\r\n                      onClick={() => handleRollCheck(true)}\r\n                    >\r\n                      Yes\r\n                    </Button>\r\n                    <Button\r\n                      className=\"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\"\r\n                      onClick={() => handleRollCheck(false)}\r\n                    >\r\n                      No\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              ) : selectedLogData ? (\r\n                <div>\r\n                  <div style={{ whiteSpace: \"pre-wrap\" }}>{displayedText}</div>\r\n                  {selectedLogData.audio_file && (\r\n                    <audio\r\n                      controls\r\n                      style={{\r\n                        backgroundColor: \"black\",\r\n                        border: \"1px solid #33ff33\",\r\n                        borderRadius: \"5px\",\r\n                        width: \"100%\",\r\n                        marginTop: \"10px\",\r\n                        color: \"#33ff33\"\r\n                      }}\r\n                    >\r\n                      <source src={selectedLogData.audio_file} type=\"audio/mp3\" />\r\n                      Your browser does not support the audio element.\r\n                    </audio>\r\n                  )}\r\n                  {logTypingComplete && (\r\n                    <Button\r\n                      className=\"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500 mt-2\"\r\n                      onClick={() => {\r\n                        setSelectedLogData(null);\r\n                        setDisplayedText(\"\");\r\n                        setLogTypingComplete(false);\r\n                      }}\r\n                    >\r\n                      Back\r\n                    </Button>\r\n                  )}\r\n                </div>\r\n              ) : logData ? (\r\n                <div>\r\n                  {logData.map((log, index) => (\r\n                    <p\r\n                      key={index}\r\n                      onClick={() => handleLogClick(log)}\r\n                      style={{ cursor: \"pointer\", textDecoration: \"underline\" }}\r\n                    >\r\n                      {log.title}\r\n                    </p>\r\n                  ))}\r\n                </div>\r\n              ) : (\r\n                <p className=\"glitch-text\">\r\n                  {terminalData || \"ENTER ACCESS CODE TO PROCEED\"}\r\n                </p>\r\n              )}\r\n            </div>\r\n          </motion.div>\r\n          <div className=\"mt-4 flex gap-2\">\r\n            <Input\r\n              className=\"bg-black text-green-400 border border-green-400 px-3 py-2 font-mono focus:outline-none\"\r\n              placeholder=\"Enter Access Code...\"\r\n              value={inputCode}\r\n              onChange={(e) => setInputCode(e.target.value)}\r\n            />\r\n            <Button\r\n              className=\"bg-green-400 text-black font-mono px-4 py-2 rounded hover:bg-green-500\"\r\n              onClick={handleAccessCode}\r\n            >\r\n              Enter\r\n            </Button>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}